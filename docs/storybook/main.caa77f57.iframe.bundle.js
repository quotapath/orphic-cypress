(self.webpackChunkcypress_storybook_component_tests=self.webpackChunkcypress_storybook_component_tests||[]).push([[179],{"./.storybook/preview.ts-generated-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,{__namedExportsOrder:()=>__namedExportsOrder,parameters:()=>parameters});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),esm=__webpack_require__("./node_modules/@storybook/theming/dist/esm/index.js"),dist_esm=(__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js")),react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),CustomDocsStory=function CustomDocsStory(_ref){var description,_docs$description,id=_ref.id,name=_ref.name,_ref$expanded=_ref.expanded,expanded=void 0===_ref$expanded||_ref$expanded,_ref$parameters=_ref.parameters,docs=(void 0===_ref$parameters?{}:_ref$parameters).docs;expanded&&docs&&(description=null===(_docs$description=docs.description)||void 0===_docs$description?void 0:_docs$description.story);var subheading=expanded&&name;return(0,jsx_runtime.jsxs)(dist_esm.ee,{storyId:null!=id?id:"",children:[subheading&&(0,jsx_runtime.jsx)(dist_esm.pm,{children:subheading}),description&&(0,jsx_runtime.jsx)(dist_esm.dk,{markdown:description}),null===docs.source.code?null:docs.source.code?(0,jsx_runtime.jsx)(dist_esm.Hw,{code:docs.source.code,dark:!0}):(0,jsx_runtime.jsx)("div",{style:{color:"white",padding:"20px"},children:"No code block provided, see Canvas â†’ Story tab instead"})]})};CustomDocsStory.displayName="CustomDocsStory";var CustomStories=function CustomStories(){var _stories,stories=(0,(0,react.useContext)(dist_esm.hv).componentStories)();return(stories=stories.filter((function(story){var _story$parameters,_story$parameters$doc;return!(null!==(_story$parameters=story.parameters)&&void 0!==_story$parameters&&null!==(_story$parameters$doc=_story$parameters.docs)&&void 0!==_story$parameters$doc&&_story$parameters$doc.disable)})))&&0!==(null===(_stories=stories)||void 0===_stories?void 0:_stories.length)?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:stories.map((function(story){return story&&(0,jsx_runtime.jsx)(CustomDocsStory,Object.assign({},story,{expanded:!0}),story.id)}))}):null},DocsPage=function DocsPage(_ref2){var children=_ref2.children;return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist_esm.Dx,{}),(0,jsx_runtime.jsx)(CustomStories,{}),children]})};try{CustomDocsStory.displayName="CustomDocsStory",CustomDocsStory.__docgenInfo={description:"",displayName:"CustomDocsStory",props:{expanded:{defaultValue:{value:"true"},description:"",name:"expanded",required:!1,type:{name:"boolean"}},withToolbar:{defaultValue:null,description:"",name:"withToolbar",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/storybook/page.tsx#CustomDocsStory"]={docgenInfo:CustomDocsStory.__docgenInfo,name:"CustomDocsStory",path:"src/storybook/page.tsx#CustomDocsStory"})}catch(__react_docgen_typescript_loader_error){}try{DocsPage.displayName="DocsPage",DocsPage.__docgenInfo={description:"This storybook uses nearly the same components for every story as a mechanism\nfor testing. So we can forgo showing the arg table or component at all, opting\ninstead just for the story's description and code block, if provided (default\ncode blocks were essentially useless)",displayName:"DocsPage",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/storybook/page.tsx#DocsPage"]={docgenInfo:DocsPage.__docgenInfo,name:"DocsPage",path:"src/storybook/page.tsx#DocsPage"})}catch(__react_docgen_typescript_loader_error){}var parameters={docs:{page:DocsPage,source:{state:"open"},theme:esm.np.dark},viewMode:"docs",actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/},expanded:!0,hideNoControlsWarning:!0}},__namedExportsOrder=["parameters"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return(0,ClientApi.uc)(value);case"argTypes":return(0,ClientApi.v9)(value);case"decorators":return value.forEach((function(decorator){return(0,ClientApi.$9)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return(0,ClientApi.HZ)(loader,!1)}));case"parameters":return(0,ClientApi.h1)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return(0,ClientApi.My)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return(0,ClientApi._C)(enhancer)}));case"render":return(0,ClientApi.$P)(value);case"globals":case"globalTypes":var v={};return v[key]=value,(0,ClientApi.h1)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./stories/BeforeEach.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Wrapped:()=>Wrapped,WrappedCyTest:()=>WrappedCyTest,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"./Button\\";\\n\\nexport default {\\n  component: Button,\\n  cy: () => {\\n    beforeEach(() => {\\n      // just something simple to prove this happens at top\\n      cy.wrap(\\"Wrapped label\\").as(\\"wrappedLabel\\");\\n    });\\n  },\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Wrapped label\\" />\\n);\\n\\nWrapped.cy = () => {\\n  cy.get(\\"@wrappedLabel\\").then((wrappedLabel) =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", wrappedLabel)\\n  );\\n  cy.wrap(\\"This will be reset\\").as(\\"wrappedLabel\\");\\n};\\n\\nWrapped.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nYou can use default export\'s \\\\`cy\\\\` property to do things like execute\\nhooks such as \\\\`beforeEach\\\\` to establish test state.`,\\n    },\\n    source: {\\n      code: `\\nexport default {\\n  component: Button,\\n  cy: () => {\\n    beforeEach(() => {\\n      // just something simple to prove this happens at top\\n      cy.wrap(\\"Wrapped label\\").as(\\"wrappedLabel\\");\\n    });\\n  },\\n};\\n\\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Wrapped label\\" />\\n);\\n\\nWrapped.cy = () => {\\n  cy.get(\\"@wrappedLabel\\").then((wrappedLabel) =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", wrappedLabel)\\n  );\\n  cy.wrap(\\"This will be reset\\").as(\\"wrappedLabel\\");\\n};`,\\n    },\\n  },\\n};\\n\\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\n\\nWrappedCyTest.cyTest = (Story) => {\\n  beforeEach(() => {\\n    cy.wrap(\\"Before Wrapped label\\").as(\\"beforeWrappedLabel\\");\\n  });\\n\\n  it(\\"should get label arg from default export beforeEach setup\\", function () {\\n    // function keyword + this instead of .get(\\"@alias\\") just to show variant\\n    cy.mount(<Story label={this.wrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.wrappedLabel);\\n  });\\n\\n  it(\\"should get label arg from beforeEach in local cyTest\\", function () {\\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.beforeWrappedLabel);\\n  });\\n};\\n\\nWrappedCyTest.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\\nwhich is the only way to have such hooks execute for only specific story tests.\\n`,\\n    },\\n    source: {\\n      code: `\\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\nWrappedCyTest.cyTest = (Story) => {\\n  beforeEach(() => {\\n    cy.wrap(\\"Before Wrapped label\\").as(\\"beforeWrappedLabel\\");\\n  });\\n\\n  it(\\"should get label arg from default export beforeEach setup\\", function () {\\n    // function keyword + this instead of .get(\\"@alias\\") just to show variant\\n    cy.mount(<Story label={this.wrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.wrappedLabel);\\n  });\\n\\n  it(\\"should get label arg from beforeEach in local cyTest\\", function () {\\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.beforeWrappedLabel);\\n  });\\n};`,\\n    },\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"Wrapped":{"startLoc":{"col":56,"line":18},"endLoc":{"col":1,"line":20},"startBody":{"col":56,"line":18},"endBody":{"col":1,"line":20}},"WrappedCyTest":{"startLoc":{"col":62,"line":62},"endLoc":{"col":1,"line":64},"startBody":{"col":62,"line":62},"endBody":{"col":1,"line":64}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "./Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"./Button\\";\\n\\nexport default {\\n  component: Button,\\n  cy: () => {\\n    beforeEach(() => {\\n      // just something simple to prove this happens at top\\n      cy.wrap(\\"Wrapped label\\").as(\\"wrappedLabel\\");\\n    });\\n  },\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Wrapped label\\" />\\n);\\n\\nWrapped.cy = () => {\\n  cy.get(\\"@wrappedLabel\\").then((wrappedLabel) =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", wrappedLabel)\\n  );\\n  cy.wrap(\\"This will be reset\\").as(\\"wrappedLabel\\");\\n};\\n\\nWrapped.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nYou can use default export\'s \\\\`cy\\\\` property to do things like execute\\nhooks such as \\\\`beforeEach\\\\` to establish test state.`,\\n    },\\n    source: {\\n      code: `\\nexport default {\\n  component: Button,\\n  cy: () => {\\n    beforeEach(() => {\\n      // just something simple to prove this happens at top\\n      cy.wrap(\\"Wrapped label\\").as(\\"wrappedLabel\\");\\n    });\\n  },\\n};\\n\\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Wrapped label\\" />\\n);\\n\\nWrapped.cy = () => {\\n  cy.get(\\"@wrappedLabel\\").then((wrappedLabel) =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", wrappedLabel)\\n  );\\n  cy.wrap(\\"This will be reset\\").as(\\"wrappedLabel\\");\\n};`,\\n    },\\n  },\\n};\\n\\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\n\\nWrappedCyTest.cyTest = (Story) => {\\n  beforeEach(() => {\\n    cy.wrap(\\"Before Wrapped label\\").as(\\"beforeWrappedLabel\\");\\n  });\\n\\n  it(\\"should get label arg from default export beforeEach setup\\", function () {\\n    // function keyword + this instead of .get(\\"@alias\\") just to show variant\\n    cy.mount(<Story label={this.wrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.wrappedLabel);\\n  });\\n\\n  it(\\"should get label arg from beforeEach in local cyTest\\", function () {\\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.beforeWrappedLabel);\\n  });\\n};\\n\\nWrappedCyTest.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\\nwhich is the only way to have such hooks execute for only specific story tests.\\n`,\\n    },\\n    source: {\\n      code: `\\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\nWrappedCyTest.cyTest = (Story) => {\\n  beforeEach(() => {\\n    cy.wrap(\\"Before Wrapped label\\").as(\\"beforeWrappedLabel\\");\\n  });\\n\\n  it(\\"should get label arg from default export beforeEach setup\\", function () {\\n    // function keyword + this instead of .get(\\"@alias\\") just to show variant\\n    cy.mount(<Story label={this.wrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.wrappedLabel);\\n  });\\n\\n  it(\\"should get label arg from beforeEach in local cyTest\\", function () {\\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.beforeWrappedLabel);\\n  });\\n};`,\\n    },\\n  },\\n};\\n","locationsMap":{"wrapped":{"startLoc":{"col":56,"line":18},"endLoc":{"col":1,"line":20},"startBody":{"col":56,"line":18},"endBody":{"col":1,"line":20}},"wrapped-cy-test":{"startLoc":{"col":62,"line":62},"endLoc":{"col":1,"line":64},"startBody":{"col":62,"line":62},"endBody":{"col":1,"line":64}}}},},\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("Wrapped label").as("wrappedLabel");\n    });\n  },\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Wrapped label" />\n);;\n\nWrapped.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};\n\nWrapped.parameters = {\n  docs: {\n    description: {\n      story: `\nYou can use default export\'s \\`cy\\` property to do things like execute\nhooks such as \\`beforeEach\\` to establish test state.`,\n    },\n    source: {\n      code: `\nexport default {\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("Wrapped label").as("wrappedLabel");\n    });\n  },\n};\n\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Wrapped label" />\n);\n\nWrapped.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};`,\n    },\n  },\n};\n\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\n\nWrappedCyTest.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};\n\nWrappedCyTest.parameters = {\n  docs: {\n    description: {\n      story: `\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\nwhich is the only way to have such hooks execute for only specific story tests.\n`,\n    },\n    source: {\n      code: `\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\nWrappedCyTest.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};`,\n    },\n  },\n};\n',locationsMap:{wrapped:{startLoc:{col:56,line:26},endLoc:{col:1,line:28},startBody:{col:56,line:26},endBody:{col:1,line:28}},"wrapped-cy-test":{startLoc:{col:62,line:70},endLoc:{col:1,line:72},startBody:{col:62,line:70},endBody:{col:1,line:72}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "./Button";\n\nexport default {\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("Wrapped label").as("wrappedLabel");\n    });\n  },\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Wrapped label" />\n);\n\nWrapped.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};\n\nWrapped.parameters = {\n  docs: {\n    description: {\n      story: `\nYou can use default export\'s \\`cy\\` property to do things like execute\nhooks such as \\`beforeEach\\` to establish test state.`,\n    },\n    source: {\n      code: `\nexport default {\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("Wrapped label").as("wrappedLabel");\n    });\n  },\n};\n\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Wrapped label" />\n);\n\nWrapped.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};`,\n    },\n  },\n};\n\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\n\nWrappedCyTest.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};\n\nWrappedCyTest.parameters = {\n  docs: {\n    description: {\n      story: `\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\nwhich is the only way to have such hooks execute for only specific story tests.\n`,\n    },\n    source: {\n      code: `\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\nWrappedCyTest.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};`,\n    },\n  },\n};\n',locationsMap:{wrapped:{startLoc:{col:56,line:18},endLoc:{col:1,line:20},startBody:{col:56,line:18},endBody:{col:1,line:20}},"wrapped-cy-test":{startLoc:{col:62,line:62},endLoc:{col:1,line:64},startBody:{col:62,line:62},endBody:{col:1,line:64}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){beforeEach((function(){cy.wrap("Wrapped label").as("wrappedLabel")}))}))};var Wrapped=function Wrapped(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Wrapped label"}))};Wrapped.displayName="Wrapped",Wrapped.cy=function(){cy.get("@wrappedLabel").then((function(wrappedLabel){return cy.dataCy("button").should("contain",wrappedLabel)})),cy.wrap("This will be reset").as("wrappedLabel")},Wrapped.parameters={docs:{description:{story:"\nYou can use default export's `cy` property to do things like execute\nhooks such as `beforeEach` to establish test state."},source:{code:'\nexport default {\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("Wrapped label").as("wrappedLabel");\n    });\n  },\n};\n\nexport const Wrapped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Wrapped label" />\n);\n\nWrapped.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};'}}};var WrappedCyTest=function WrappedCyTest(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args))};WrappedCyTest.displayName="WrappedCyTest",WrappedCyTest.cyTest=function(Story){beforeEach((function(){cy.wrap("Before Wrapped label").as("beforeWrappedLabel")})),it("should get label arg from default export beforeEach setup",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{label:this.wrappedLabel})),cy.dataCy("button").should("contain",this.wrappedLabel)})),it("should get label arg from beforeEach in local cyTest",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{label:this.beforeWrappedLabel})),cy.dataCy("button").should("contain",this.beforeWrappedLabel)}))},WrappedCyTest.parameters={docs:{description:{story:"\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\nwhich is the only way to have such hooks execute for only specific story tests.\n"},source:{code:'\nexport const WrappedCyTest: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\nWrappedCyTest.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};'}}};var __namedExportsOrder=["Wrapped","WrappedCyTest"]},"./stories/FileFormats/ExternalTest/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ExternalTest:()=>ExternalTest,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:_Button__WEBPACK_IMPORTED_MODULE_2__.z,cyIncludeStories:[],includeStories:[]};var ExternalTest=function ExternalTest(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.z,Object.assign({},args))};ExternalTest.displayName="ExternalTest",ExternalTest.args={label:"Will be tested in external .cy file"},ExternalTest.parameters={docs:{disable:!0}};var __namedExportsOrder=["ExternalTest"]},"./stories/FileFormats/StorybookFiles.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{StoryFunctionWithCyFunction:()=>StoryFunctionWithCyFunction,StoryFunctionWithCyObject:()=>StoryFunctionWithCyObject,StoryFunctionWithCyTest:()=>StoryFunctionWithCyTest,StoryObjectWithCyFunction:()=>StoryObjectWithCyFunction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  title: \\"File Formats/Storybook Files\\",\\n  component: Button,\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story function\\" />;\\n\\nStoryFunctionWithCyFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n\\nStoryFunctionWithCyFunction.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\".cy is the simplest format, expecting just a function which executes in cypress\\",\\n    },\\n    source: {\\n      code: `\\nexport default { component: Button };\\n\\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story function\\" />;\\n\\nStoryFunctionWithCyFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");`,\\n    },\\n  },\\n};\\n\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\nStoryFunctionWithCyObject.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n.cy also allows an object syntax where the text keys become the input for cypress \\\\`it\\\\`\'s\\nand the bodies execute within their own tests.\\n\\n\\\\`\\\\`\\\\`tsx\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\\\`\\\\`\\\\`\\n\\nbecomes\\n\\n\\\\`\\\\`\\\\`tsx\\ndescribe(\\"Story Function With Cy Object\\", () => {\\n  it(\\"should contain \'Story object\' label\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\")\\n  );\\n\\n  it(\\"should not be disabled by default\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\")\\n  );\\n});\\n\\\\`\\\\`\\\\`\\n`,\\n    },\\n    source: { code: null },\\n  },\\n};\\n\\n// Could accept args, but label is required, so just showing a non-args version\\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button label=\\"Story test\\" {...args} />;\\n\\nStoryFunctionWithCyTest.cyTest = (Story) => {\\n  it(\\"should contain \'Story test\' label\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story test\\");\\n  });\\n\\n  it(\\"should accept a disabled prop\\", () => {\\n    cy.mount(<Story disabled />);\\n    cy.dataCy(\\"button\\").should(\\"be.disabled\\");\\n  });\\n\\n  it.skip(\\"should skip a test\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\n      \\"contain\\",\\n      \\"This test would fail if not skipped\\"\\n    );\\n  });\\n};\\n\\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\\n  args: { label: \\"Story function\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\"),\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"StoryFunctionWithCyFunction":{"startLoc":{"col":76,"line":13},"endLoc":{"col":48,"line":15},"startBody":{"col":76,"line":13},"endBody":{"col":48,"line":15}},"StoryFunctionWithCyObject":{"startLoc":{"col":74,"line":40},"endLoc":{"col":46,"line":42},"startBody":{"col":74,"line":40},"endBody":{"col":46,"line":42}},"StoryFunctionWithCyTest":{"startLoc":{"col":72,"line":93},"endLoc":{"col":44,"line":95},"startBody":{"col":72,"line":93},"endBody":{"col":44,"line":95}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  title: \\"File Formats/Storybook Files\\",\\n  component: Button,\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story function\\" />;\\n\\nStoryFunctionWithCyFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n\\nStoryFunctionWithCyFunction.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\".cy is the simplest format, expecting just a function which executes in cypress\\",\\n    },\\n    source: {\\n      code: `\\nexport default { component: Button };\\n\\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story function\\" />;\\n\\nStoryFunctionWithCyFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");`,\\n    },\\n  },\\n};\\n\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\nStoryFunctionWithCyObject.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n.cy also allows an object syntax where the text keys become the input for cypress \\\\`it\\\\`\'s\\nand the bodies execute within their own tests.\\n\\n\\\\`\\\\`\\\\`tsx\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\\\`\\\\`\\\\`\\n\\nbecomes\\n\\n\\\\`\\\\`\\\\`tsx\\ndescribe(\\"Story Function With Cy Object\\", () => {\\n  it(\\"should contain \'Story object\' label\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\")\\n  );\\n\\n  it(\\"should not be disabled by default\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\")\\n  );\\n});\\n\\\\`\\\\`\\\\`\\n`,\\n    },\\n    source: { code: null },\\n  },\\n};\\n\\n// Could accept args, but label is required, so just showing a non-args version\\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button label=\\"Story test\\" {...args} />;\\n\\nStoryFunctionWithCyTest.cyTest = (Story) => {\\n  it(\\"should contain \'Story test\' label\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story test\\");\\n  });\\n\\n  it(\\"should accept a disabled prop\\", () => {\\n    cy.mount(<Story disabled />);\\n    cy.dataCy(\\"button\\").should(\\"be.disabled\\");\\n  });\\n\\n  it.skip(\\"should skip a test\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\n      \\"contain\\",\\n      \\"This test would fail if not skipped\\"\\n    );\\n  });\\n};\\n\\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\\n  args: { label: \\"Story function\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\"),\\n};\\n","locationsMap":{"story-function-with-cy-function":{"startLoc":{"col":76,"line":13},"endLoc":{"col":48,"line":15},"startBody":{"col":76,"line":13},"endBody":{"col":48,"line":15}},"story-function-with-cy-object":{"startLoc":{"col":74,"line":40},"endLoc":{"col":46,"line":42},"startBody":{"col":74,"line":40},"endBody":{"col":46,"line":42}},"story-function-with-cy-test":{"startLoc":{"col":72,"line":93},"endLoc":{"col":44,"line":95},"startBody":{"col":72,"line":93},"endBody":{"col":44,"line":95}}}},},\n  title: "File Formats/Storybook Files",\n  component: Button,\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n\nStoryFunctionWithCyFunction.parameters = {\n  docs: {\n    description: {\n      story:\n        ".cy is the simplest format, expecting just a function which executes in cypress",\n    },\n    source: {\n      code: `\nexport default { component: Button };\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");`,\n    },\n  },\n};\n\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\nStoryFunctionWithCyObject.parameters = {\n  docs: {\n    description: {\n      story: `\n.cy also allows an object syntax where the text keys become the input for cypress \\`it\\`\'s\nand the bodies execute within their own tests.\n\n\\`\\`\\`tsx\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\\`\\`\\`\n\nbecomes\n\n\\`\\`\\`tsx\ndescribe("Story Function With Cy Object", () => {\n  it("should contain \'Story object\' label", () =>\n    cy.dataCy("button").should("contain", "Story object")\n  );\n\n  it("should not be disabled by default", () =>\n    cy.dataCy("button").should("not.be.disabled")\n  );\n});\n\\`\\`\\`\n`,\n    },\n    source: { code: null },\n  },\n};\n\n// Could accept args, but label is required, so just showing a non-args version\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button label="Story test" {...args} />;\n\nStoryFunctionWithCyTest.cyTest = (Story) => {\n  it("should contain \'Story test\' label", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should("contain", "Story test");\n  });\n\n  it("should accept a disabled prop", () => {\n    cy.mount(<Story disabled />);\n    cy.dataCy("button").should("be.disabled");\n  });\n\n  it.skip("should skip a test", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should(\n      "contain",\n      "This test would fail if not skipped"\n    );\n  });\n};\n\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\n  args: { label: "Story function" },\n  cy: () => cy.dataCy("button").should("contain", "Story function"),\n};\n',locationsMap:{"story-function-with-cy-function":{startLoc:{col:76,line:21},endLoc:{col:48,line:23},startBody:{col:76,line:21},endBody:{col:48,line:23}},"story-function-with-cy-object":{startLoc:{col:74,line:48},endLoc:{col:46,line:50},startBody:{col:74,line:48},endBody:{col:46,line:50}},"story-function-with-cy-test":{startLoc:{col:72,line:101},endLoc:{col:44,line:103},startBody:{col:72,line:101},endBody:{col:44,line:103}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { Button } from "../Button";\n\nexport default {\n  title: "File Formats/Storybook Files",\n  component: Button,\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n\nStoryFunctionWithCyFunction.parameters = {\n  docs: {\n    description: {\n      story:\n        ".cy is the simplest format, expecting just a function which executes in cypress",\n    },\n    source: {\n      code: `\nexport default { component: Button };\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");`,\n    },\n  },\n};\n\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\nStoryFunctionWithCyObject.parameters = {\n  docs: {\n    description: {\n      story: `\n.cy also allows an object syntax where the text keys become the input for cypress \\`it\\`\'s\nand the bodies execute within their own tests.\n\n\\`\\`\\`tsx\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\\`\\`\\`\n\nbecomes\n\n\\`\\`\\`tsx\ndescribe("Story Function With Cy Object", () => {\n  it("should contain \'Story object\' label", () =>\n    cy.dataCy("button").should("contain", "Story object")\n  );\n\n  it("should not be disabled by default", () =>\n    cy.dataCy("button").should("not.be.disabled")\n  );\n});\n\\`\\`\\`\n`,\n    },\n    source: { code: null },\n  },\n};\n\n// Could accept args, but label is required, so just showing a non-args version\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button label="Story test" {...args} />;\n\nStoryFunctionWithCyTest.cyTest = (Story) => {\n  it("should contain \'Story test\' label", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should("contain", "Story test");\n  });\n\n  it("should accept a disabled prop", () => {\n    cy.mount(<Story disabled />);\n    cy.dataCy("button").should("be.disabled");\n  });\n\n  it.skip("should skip a test", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should(\n      "contain",\n      "This test would fail if not skipped"\n    );\n  });\n};\n\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\n  args: { label: "Story function" },\n  cy: () => cy.dataCy("button").should("contain", "Story function"),\n};\n',locationsMap:{"story-function-with-cy-function":{startLoc:{col:76,line:13},endLoc:{col:48,line:15},startBody:{col:76,line:13},endBody:{col:48,line:15}},"story-function-with-cy-object":{startLoc:{col:74,line:40},endLoc:{col:46,line:42},startBody:{col:74,line:40},endBody:{col:46,line:42}},"story-function-with-cy-test":{startLoc:{col:72,line:93},endLoc:{col:44,line:95},startBody:{col:72,line:93},endBody:{col:44,line:95}}}},_parameters),title:"File Formats/Storybook Files",component:_Button__WEBPACK_IMPORTED_MODULE_5__.z};var StoryFunctionWithCyFunction=function StoryFunctionWithCyFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};StoryFunctionWithCyFunction.displayName="StoryFunctionWithCyFunction",StoryFunctionWithCyFunction.cy=function(){return cy.dataCy("button").should("contain","Story function")},StoryFunctionWithCyFunction.parameters={docs:{description:{story:".cy is the simplest format, expecting just a function which executes in cypress"},source:{code:'\nexport default { component: Button };\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");'}}};var StoryFunctionWithCyObject=function StoryFunctionWithCyObject(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story object"}))};StoryFunctionWithCyObject.displayName="StoryFunctionWithCyObject",StoryFunctionWithCyObject.cy={"should contain 'Story object' label":function shouldContainStoryObjectLabel(){return cy.dataCy("button").should("contain","Story object")},"should not be disabled by default":function shouldNotBeDisabledByDefault(){return cy.dataCy("button").should("not.be.disabled")}},StoryFunctionWithCyObject.parameters={docs:{description:{story:'\n.cy also allows an object syntax where the text keys become the input for cypress `it`\'s\nand the bodies execute within their own tests.\n\n```tsx\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n```\n\nbecomes\n\n```tsx\ndescribe("Story Function With Cy Object", () => {\n  it("should contain \'Story object\' label", () =>\n    cy.dataCy("button").should("contain", "Story object")\n  );\n\n  it("should not be disabled by default", () =>\n    cy.dataCy("button").should("not.be.disabled")\n  );\n});\n```\n'},source:{code:null}}};var StoryFunctionWithCyTest=function StoryFunctionWithCyTest(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({label:"Story test"},args))};StoryFunctionWithCyTest.displayName="StoryFunctionWithCyTest",StoryFunctionWithCyTest.cyTest=function(Story){it("should contain 'Story test' label",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{})),cy.dataCy("button").should("contain","Story test")})),it("should accept a disabled prop",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{disabled:!0})),cy.dataCy("button").should("be.disabled")})),it.skip("should skip a test",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{})),cy.dataCy("button").should("contain","This test would fail if not skipped")}))};var StoryObjectWithCyFunction={args:{label:"Story function"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Story function")}))},__namedExportsOrder=["StoryFunctionWithCyFunction","StoryFunctionWithCyObject","StoryFunctionWithCyTest","StoryObjectWithCyFunction"]},"./stories/MDX/CSFStoriesWithArbitraryMDX/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CSFStoriesWithArbitraryMDX:()=>CSFStoriesWithArbitraryMDX,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js");var esm=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)("h1",{id:"csf-stories-with-arbitrary-mdx"},"CSF Stories with Arbitrary MDX"),(0,esm.kt)("p",null,"You can import mdx files and use them as docs just fine while also having cypress expectations."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'import type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\nimport mdx from "./index.mdx";\nimport { Button } from "../../Button";\n\nexport default { component: Button };\n\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\n  args\n) => <Button {...args} />;\nCSFStoriesWithArbitraryMDX.args = {\n  label: "Documentation provided by arbitrary mdx file imports",\n};\n// don\'t show the component in the docs created by mdx\nCSFStoriesWithArbitraryMDX.parameters = {\n  docs: {\n    page: mdx,\n  },\n};\n')))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var _parameters,Button=__webpack_require__("./stories/Button/index.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const index_stories={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import type { ComponentStory } from \\"@storybook/react\\";\\nimport * as React from \\"react\\";\\n// @ts-ignore\\nimport mdx from \\"./index.mdx\\";\\nimport { Button } from \\"../../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\\n  args\\n) => <Button {...args} />;\\nCSFStoriesWithArbitraryMDX.args = {\\n  label: \\"Documentation provided by arbitrary mdx file imports\\",\\n};\\n// don\'t show the component in the docs created by mdx\\nCSFStoriesWithArbitraryMDX.parameters = {\\n  docs: {\\n    page: mdx,\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"CSFStoriesWithArbitraryMDX":{"startLoc":{"col":73,"line":9},"endLoc":{"col":25,"line":11},"startBody":{"col":73,"line":9},"endBody":{"col":25,"line":11}}};\n    \nimport type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\n// @ts-ignore\nimport mdx from "./index.mdx";\nimport { Button } from "../../Button";\n\nexport default {parameters: {"storySource":{"source":"import type { ComponentStory } from \\"@storybook/react\\";\\nimport * as React from \\"react\\";\\n// @ts-ignore\\nimport mdx from \\"./index.mdx\\";\\nimport { Button } from \\"../../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\\n  args\\n) => <Button {...args} />;\\nCSFStoriesWithArbitraryMDX.args = {\\n  label: \\"Documentation provided by arbitrary mdx file imports\\",\\n};\\n// don\'t show the component in the docs created by mdx\\nCSFStoriesWithArbitraryMDX.parameters = {\\n  docs: {\\n    page: mdx,\\n  },\\n};\\n","locationsMap":{"csf-stories-with-arbitrary-mdx":{"startLoc":{"col":73,"line":9},"endLoc":{"col":25,"line":11},"startBody":{"col":73,"line":9},"endBody":{"col":25,"line":11}}}},}, component: Button };\n\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\n  args\n) => <Button {...args} />;\nCSFStoriesWithArbitraryMDX.args = {\n  label: "Documentation provided by arbitrary mdx file imports",\n};\n// don\'t show the component in the docs created by mdx\nCSFStoriesWithArbitraryMDX.parameters = {\n  docs: {\n    page: mdx,\n  },\n};\n',locationsMap:{"csf-stories-with-arbitrary-mdx":{startLoc:{col:73,line:17},endLoc:{col:25,line:19},startBody:{col:73,line:17},endBody:{col:25,line:19}}}}},_parameters.storySource={source:'import type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\n// @ts-ignore\nimport mdx from "./index.mdx";\nimport { Button } from "../../Button";\n\nexport default { component: Button };\n\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\n  args\n) => <Button {...args} />;\nCSFStoriesWithArbitraryMDX.args = {\n  label: "Documentation provided by arbitrary mdx file imports",\n};\n// don\'t show the component in the docs created by mdx\nCSFStoriesWithArbitraryMDX.parameters = {\n  docs: {\n    page: mdx,\n  },\n};\n',locationsMap:{"csf-stories-with-arbitrary-mdx":{startLoc:{col:73,line:9},endLoc:{col:25,line:11},startBody:{col:73,line:9},endBody:{col:25,line:11}}}},_parameters),component:Button.z};var CSFStoriesWithArbitraryMDX=function CSFStoriesWithArbitraryMDX(args){return(0,jsx_runtime.jsx)(Button.z,Object.assign({},args))};CSFStoriesWithArbitraryMDX.displayName="CSFStoriesWithArbitraryMDX",CSFStoriesWithArbitraryMDX.args={label:"Documentation provided by arbitrary mdx file imports"},CSFStoriesWithArbitraryMDX.parameters={docs:{page:MDXContent}};var __namedExportsOrder=["CSFStoriesWithArbitraryMDX"]},"./stories/MDX/DocsInMDX/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DocsInMDX:()=>DocsInMDX,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:_Button__WEBPACK_IMPORTED_MODULE_2__.z,includeStories:[],cyIncludeStories:!0};var DocsInMDX=function DocsInMDX(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.z,Object.assign({},args))};DocsInMDX.displayName="DocsInMDX",DocsInMDX.args={label:"Documentation provided by mdx file while component is written in csf"},DocsInMDX.parameters={docs:{disable:!0}};var __namedExportsOrder=["DocsInMDX"]},"./stories/SkippingAndSelecting/FullySkipped.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Another:()=>Another,Skipped:()=>Skipped,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cySkip: true,\\n};\\n\\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkipped.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n\\n// Also shows object spread syntax\\nexport const Another = {\\n  ...Skipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"Skipped":{"startLoc":{"col":56,"line":10},"endLoc":{"col":1,"line":12},"startBody":{"col":56,"line":10},"endBody":{"col":1,"line":12}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cySkip: true,\\n};\\n\\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkipped.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n\\n// Also shows object spread syntax\\nexport const Another = {\\n  ...Skipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n","locationsMap":{"skipped":{"startLoc":{"col":56,"line":10},"endLoc":{"col":1,"line":12},"startBody":{"col":56,"line":10},"endBody":{"col":1,"line":12}}}},},\n  component: Button,\n  cySkip: true,\n};\n\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkipped.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n\n// Also shows object spread syntax\nexport const Another = {\n  ...Skipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{skipped:{startLoc:{col:56,line:18},endLoc:{col:1,line:20},startBody:{col:56,line:18},endBody:{col:1,line:20}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {\n  component: Button,\n  cySkip: true,\n};\n\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkipped.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n\n// Also shows object spread syntax\nexport const Another = {\n  ...Skipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{skipped:{startLoc:{col:56,line:10},endLoc:{col:1,line:12},startBody:{col:56,line:10},endBody:{col:1,line:12}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,cySkip:!0};var Skipped=function Skipped(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};Skipped.displayName="Skipped",Skipped.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")};var Another=Object.assign({},Skipped,{args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")}))}),__namedExportsOrder=["Skipped","Another"]},"./stories/SkippingAndSelecting/IgnoringViaCyIncludeStories.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{NotSkippedFunction:()=>NotSkippedFunction,NotSkippedObject:()=>NotSkippedObject,SkippedFunction:()=>SkippedFunction,SkippedObject:()=>SkippedObject,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cyIncludeStories: [\\"NotSkippedFunction\\", \\"NotSkippedObject\\"],\\n};\\n\\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n\\nexport const NotSkippedObject = {\\n  ...NotSkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Another\\"),\\n};\\n\\nexport const SkippedObject = {\\n  ...NotSkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"NotSkippedFunction":{"startLoc":{"col":67,"line":10},"endLoc":{"col":1,"line":12},"startBody":{"col":67,"line":10},"endBody":{"col":1,"line":12}},"SkippedFunction":{"startLoc":{"col":64,"line":17},"endLoc":{"col":1,"line":19},"startBody":{"col":64,"line":17},"endBody":{"col":1,"line":19}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cyIncludeStories: [\\"NotSkippedFunction\\", \\"NotSkippedObject\\"],\\n};\\n\\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n\\nexport const NotSkippedObject = {\\n  ...NotSkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Another\\"),\\n};\\n\\nexport const SkippedObject = {\\n  ...NotSkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n","locationsMap":{"not-skipped-function":{"startLoc":{"col":67,"line":10},"endLoc":{"col":1,"line":12},"startBody":{"col":67,"line":10},"endBody":{"col":1,"line":12}},"skipped-function":{"startLoc":{"col":64,"line":17},"endLoc":{"col":1,"line":19},"startBody":{"col":64,"line":17},"endBody":{"col":1,"line":19}}}},},\n  component: Button,\n  cyIncludeStories: ["NotSkippedFunction", "NotSkippedObject"],\n};\n\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);;\n\nNotSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n\nexport const NotSkippedObject = {\n  ...NotSkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Another"),\n};\n\nexport const SkippedObject = {\n  ...NotSkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{"not-skipped-function":{startLoc:{col:67,line:18},endLoc:{col:1,line:20},startBody:{col:67,line:18},endBody:{col:1,line:20}},"skipped-function":{startLoc:{col:64,line:25},endLoc:{col:1,line:27},startBody:{col:64,line:25},endBody:{col:1,line:27}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {\n  component: Button,\n  cyIncludeStories: ["NotSkippedFunction", "NotSkippedObject"],\n};\n\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nNotSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n\nexport const NotSkippedObject = {\n  ...NotSkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Another"),\n};\n\nexport const SkippedObject = {\n  ...NotSkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{"not-skipped-function":{startLoc:{col:67,line:10},endLoc:{col:1,line:12},startBody:{col:67,line:10},endBody:{col:1,line:12}},"skipped-function":{startLoc:{col:64,line:17},endLoc:{col:1,line:19},startBody:{col:64,line:17},endBody:{col:1,line:19}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,cyIncludeStories:["NotSkippedFunction","NotSkippedObject"]};var NotSkippedFunction=function NotSkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};NotSkippedFunction.displayName="NotSkippedFunction",NotSkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Story function")};var SkippedFunction=function SkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};SkippedFunction.displayName="SkippedFunction",SkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")};var NotSkippedObject=Object.assign({},NotSkippedFunction,{args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Another")}))}),SkippedObject=Object.assign({},NotSkippedFunction,{args:{label:"Another"},cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")}))}),__namedExportsOrder=["NotSkippedFunction","SkippedFunction","NotSkippedObject","SkippedObject"]},"./stories/SkippingAndSelecting/Only.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{NotSkippedFunction:()=>NotSkippedFunction,NotSkippedObject:()=>NotSkippedObject,SkippedFunction:()=>SkippedFunction,SkippedObject:()=>SkippedObject,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,includeStories:[]};var NotSkippedFunction=function NotSkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};NotSkippedFunction.displayName="NotSkippedFunction",NotSkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Story function")},NotSkippedFunction.cyOnly=!0;var SkippedFunction=function SkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};SkippedFunction.displayName="SkippedFunction",SkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")};var NotSkippedObject={args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Another")})),cyOnly:!0},SkippedObject={args:{label:"Another"},cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")}))},__namedExportsOrder=["NotSkippedFunction","SkippedFunction","NotSkippedObject","SkippedObject"]},"./stories/SkippingAndSelecting/SkippedStories.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{NotSkipped:()=>NotSkipped,Skipped:()=>Skipped,SkippedFunction:()=>SkippedFunction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkipped.cy = () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\nSkippedFunction.cySkip = true;\\n\\n// Also shows object spread syntax\\nexport const Skipped = {\\n  ...NotSkipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n  cySkip: true,\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"NotSkipped":{"startLoc":{"col":59,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":59,"line":7},"endBody":{"col":1,"line":9}},"SkippedFunction":{"startLoc":{"col":64,"line":13},"endLoc":{"col":1,"line":15},"startBody":{"col":64,"line":13},"endBody":{"col":1,"line":15}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkipped.cy = () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\nSkippedFunction.cySkip = true;\\n\\n// Also shows object spread syntax\\nexport const Skipped = {\\n  ...NotSkipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n  cySkip: true,\\n};\\n","locationsMap":{"not-skipped":{"startLoc":{"col":59,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":59,"line":7},"endBody":{"col":1,"line":9}},"skipped-function":{"startLoc":{"col":64,"line":13},"endLoc":{"col":1,"line":15},"startBody":{"col":64,"line":13},"endBody":{"col":1,"line":15}}}},}, component: Button };\n\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);;\n\nNotSkipped.cy = () => cy.dataCy("button").should("contain", "Story function");\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\nSkippedFunction.cySkip = true;\n\n// Also shows object spread syntax\nexport const Skipped = {\n  ...NotSkipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n  cySkip: true,\n};\n',locationsMap:{"not-skipped":{startLoc:{col:59,line:15},endLoc:{col:1,line:17},startBody:{col:59,line:15},endBody:{col:1,line:17}},"skipped-function":{startLoc:{col:64,line:21},endLoc:{col:1,line:23},startBody:{col:64,line:21},endBody:{col:1,line:23}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default { component: Button };\n\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nNotSkipped.cy = () => cy.dataCy("button").should("contain", "Story function");\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\nSkippedFunction.cySkip = true;\n\n// Also shows object spread syntax\nexport const Skipped = {\n  ...NotSkipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n  cySkip: true,\n};\n',locationsMap:{"not-skipped":{startLoc:{col:59,line:7},endLoc:{col:1,line:9},startBody:{col:59,line:7},endBody:{col:1,line:9}},"skipped-function":{startLoc:{col:64,line:13},endLoc:{col:1,line:15},startBody:{col:64,line:13},endBody:{col:1,line:15}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z};var NotSkipped=function NotSkipped(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};NotSkipped.displayName="NotSkipped",NotSkipped.cy=function(){return cy.dataCy("button").should("contain","Story function")};var SkippedFunction=function SkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};SkippedFunction.displayName="SkippedFunction",SkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")},SkippedFunction.cySkip=!0;var Skipped=Object.assign({},NotSkipped,{args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")})),cySkip:!0}),__namedExportsOrder=["NotSkipped","SkippedFunction","Skipped"]},"./stories/StubActions/BeforeEach.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SpyOnArgsWhichAreAlreadyProvided:()=>SpyOnArgsWhichAreAlreadyProvided,SpyOnArgsWhichAreProvidedInDefaultExport:()=>SpyOnArgsWhichAreProvidedInDefaultExport,SpyOnArgsWhichAreProvidedToFnSyntax:()=>SpyOnArgsWhichAreProvidedToFnSyntax,StubActionsDefinedOnDefaultExport:()=>StubActionsDefinedOnDefaultExport,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js"),onClickSpy=__webpack_require__.g.Cypress?Cypress.sinon.spy((function(){return 1})):function(){return 1},onClickSpy2=__webpack_require__.g.Cypress?Cypress.sinon.spy((function(){return 1})):function(){return 1};const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import type Sinon from \\"cypress/types/sinon\\";\\nimport React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../Button\\";\\n\\n// With both of these, you\'d probably just be passing in normal functions,\\n// but here we\'re spying for the sake of meta-test assertions.\\nconst onClickSpy = (global as any).Cypress\\n  ? Cypress.sinon.spy(() => 1)\\n  : ((() => 1) as Sinon.SinonSpy);\\nconst onClickSpy2 = (global as any).Cypress\\n  ? Cypress.sinon.spy(() => 1)\\n  : ((() => 1) as Sinon.SinonSpy);\\n\\nexport default {\\n  component: ClickCount,\\n  argTypes: {\\n    onClick: { action: \\"myClickStub\\" },\\n  },\\n  args: {\\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\\n    onClick2: onClickSpy2,\\n  },\\n};\\n\\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n    cy.dataCy(\\"button\\").click();\\n\\n    // name on actions is `onClick`\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // but the action string also functions as an alias\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    // which is a nice-to-have, but is important during test b/c the stub\\n    // for the regex is still created, its just overwritten\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  },\\n  parameters: {\\n    docs: {\\n      source: {\\n        code: `\\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n    cy.dataCy(\\"button\\").click();\\n\\n    // name on actions is \\\\`onClick\\\\`\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // but the action string also functions as an alias\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    // which is a nice-to-have, but is important during test b/c the stub\\n    // for the regex is still created, its just overwritten\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  }\\n};`,\\n      },\\n    },\\n  },\\n};\\n\\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: {\\n    onClick: onClickSpy,\\n  },\\n  cy: () => {\\n    onClickSpy.resetHistory();\\n    cy.dataCy(\\"button\\")\\n      .click()\\n      // So the spy itself is already called (you\'d probably just provide a normal function)\\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n    // And then the important thing: actions object wraps that provided function in a spy\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // this time, it is the regex and no other stubs were created\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n  },\\n};\\n\\nexport const SpyOnArgsWhichAreProvidedToFnSyntax: ComponentStoryCy<\\n  typeof ClickCount\\n> = (args) => <ClickCount {...args} />;\\nSpyOnArgsWhichAreProvidedToFnSyntax.args = {\\n  onClick: onClickSpy,\\n};\\nSpyOnArgsWhichAreProvidedToFnSyntax.cy = () => {\\n  onClickSpy.resetHistory();\\n  cy.dataCy(\\"button\\")\\n    .click()\\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n  cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n};\\n\\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    onClickSpy2.resetHistory();\\n    cy.dataCy(\\"button-2\\")\\n      .click()\\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\\n    cy.get(\\"@actions\\").its(\\"onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex genereted stub\\n    cy.get(\\"@argTypesRegex.onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"SpyOnArgsWhichAreProvidedToFnSyntax":{"startLoc":{"col":4,"line":91},"endLoc":{"col":38,"line":91},"startBody":{"col":4,"line":91},"endBody":{"col":38,"line":91}}};\n    \nimport type Sinon from "cypress/types/sinon";\nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../Button";\n\n// With both of these, you\'d probably just be passing in normal functions,\n// but here we\'re spying for the sake of meta-test assertions.\nconst onClickSpy = (global as any).Cypress\n  ? Cypress.sinon.spy(() => 1)\n  : ((() => 1) as Sinon.SinonSpy);\nconst onClickSpy2 = (global as any).Cypress\n  ? Cypress.sinon.spy(() => 1)\n  : ((() => 1) as Sinon.SinonSpy);\n\nexport default {parameters: {"storySource":{"source":"import type Sinon from \\"cypress/types/sinon\\";\\nimport React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../Button\\";\\n\\n// With both of these, you\'d probably just be passing in normal functions,\\n// but here we\'re spying for the sake of meta-test assertions.\\nconst onClickSpy = (global as any).Cypress\\n  ? Cypress.sinon.spy(() => 1)\\n  : ((() => 1) as Sinon.SinonSpy);\\nconst onClickSpy2 = (global as any).Cypress\\n  ? Cypress.sinon.spy(() => 1)\\n  : ((() => 1) as Sinon.SinonSpy);\\n\\nexport default {\\n  component: ClickCount,\\n  argTypes: {\\n    onClick: { action: \\"myClickStub\\" },\\n  },\\n  args: {\\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\\n    onClick2: onClickSpy2,\\n  },\\n};\\n\\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n    cy.dataCy(\\"button\\").click();\\n\\n    // name on actions is `onClick`\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // but the action string also functions as an alias\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    // which is a nice-to-have, but is important during test b/c the stub\\n    // for the regex is still created, its just overwritten\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  },\\n  parameters: {\\n    docs: {\\n      source: {\\n        code: `\\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n    cy.dataCy(\\"button\\").click();\\n\\n    // name on actions is \\\\`onClick\\\\`\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // but the action string also functions as an alias\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    // which is a nice-to-have, but is important during test b/c the stub\\n    // for the regex is still created, its just overwritten\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  }\\n};`,\\n      },\\n    },\\n  },\\n};\\n\\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: {\\n    onClick: onClickSpy,\\n  },\\n  cy: () => {\\n    onClickSpy.resetHistory();\\n    cy.dataCy(\\"button\\")\\n      .click()\\n      // So the spy itself is already called (you\'d probably just provide a normal function)\\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n    // And then the important thing: actions object wraps that provided function in a spy\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // this time, it is the regex and no other stubs were created\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n  },\\n};\\n\\nexport const SpyOnArgsWhichAreProvidedToFnSyntax: ComponentStoryCy<\\n  typeof ClickCount\\n> = (args) => <ClickCount {...args} />;\\nSpyOnArgsWhichAreProvidedToFnSyntax.args = {\\n  onClick: onClickSpy,\\n};\\nSpyOnArgsWhichAreProvidedToFnSyntax.cy = () => {\\n  onClickSpy.resetHistory();\\n  cy.dataCy(\\"button\\")\\n    .click()\\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n  cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.get(\\"@argTypesRegex.onClick\\").should(\\"not.be.called\\");\\n};\\n\\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    onClickSpy2.resetHistory();\\n    cy.dataCy(\\"button-2\\")\\n      .click()\\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\\n    cy.get(\\"@actions\\").its(\\"onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex genereted stub\\n    cy.get(\\"@argTypesRegex.onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n  },\\n};\\n","locationsMap":{"spy-on-args-which-are-provided-to-fn-syntax":{"startLoc":{"col":4,"line":91},"endLoc":{"col":38,"line":91},"startBody":{"col":4,"line":91},"endBody":{"col":38,"line":91}}}},},\n  component: ClickCount,\n  argTypes: {\n    onClick: { action: "myClickStub" },\n  },\n  args: {\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\n    onClick2: onClickSpy2,\n  },\n};\n\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is `onClick`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // which is a nice-to-have, but is important during test b/c the stub\n    // for the regex is still created, its just overwritten\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n\n    cy.dataCy("count").should("contain", 1);\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is \\`onClick\\`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // which is a nice-to-have, but is important during test b/c the stub\n    // for the regex is still created, its just overwritten\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n\n    cy.dataCy("count").should("contain", 1);\n  }\n};`,\n      },\n    },\n  },\n};\n\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: {\n    onClick: onClickSpy,\n  },\n  cy: () => {\n    onClickSpy.resetHistory();\n    cy.dataCy("button")\n      .click()\n      // So the spy itself is already called (you\'d probably just provide a normal function)\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n    // And then the important thing: actions object wraps that provided function in a spy\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // this time, it is the regex and no other stubs were created\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n  },\n};\n\nexport const SpyOnArgsWhichAreProvidedToFnSyntax: ComponentStoryCy<\n  typeof ClickCount\n> = (args) => <ClickCount {...args} />;\nSpyOnArgsWhichAreProvidedToFnSyntax.args = {\n  onClick: onClickSpy,\n};\nSpyOnArgsWhichAreProvidedToFnSyntax.cy = () => {\n  onClickSpy.resetHistory();\n  cy.dataCy("button")\n    .click()\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n  cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n  cy.get("@argTypesRegex.onClick").should("not.be.called");\n};\n\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    onClickSpy2.resetHistory();\n    cy.dataCy("button-2")\n      .click()\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\n    cy.get("@actions").its("onClick2").should("be.calledOnceWith", 0);\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex genereted stub\n    cy.get("@argTypesRegex.onClick2").should("be.calledOnceWith", 0);\n  },\n};\n',locationsMap:{"spy-on-args-which-are-provided-to-fn-syntax":{startLoc:{col:4,line:99},endLoc:{col:38,line:99},startBody:{col:4,line:99},endBody:{col:38,line:99}}}}},_parameters.storySource={source:'import type Sinon from "cypress/types/sinon";\nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../Button";\n\n// With both of these, you\'d probably just be passing in normal functions,\n// but here we\'re spying for the sake of meta-test assertions.\nconst onClickSpy = (global as any).Cypress\n  ? Cypress.sinon.spy(() => 1)\n  : ((() => 1) as Sinon.SinonSpy);\nconst onClickSpy2 = (global as any).Cypress\n  ? Cypress.sinon.spy(() => 1)\n  : ((() => 1) as Sinon.SinonSpy);\n\nexport default {\n  component: ClickCount,\n  argTypes: {\n    onClick: { action: "myClickStub" },\n  },\n  args: {\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\n    onClick2: onClickSpy2,\n  },\n};\n\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is `onClick`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // which is a nice-to-have, but is important during test b/c the stub\n    // for the regex is still created, its just overwritten\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n\n    cy.dataCy("count").should("contain", 1);\n  },\n  parameters: {\n    docs: {\n      source: {\n        code: `\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is \\`onClick\\`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // which is a nice-to-have, but is important during test b/c the stub\n    // for the regex is still created, its just overwritten\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n\n    cy.dataCy("count").should("contain", 1);\n  }\n};`,\n      },\n    },\n  },\n};\n\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: {\n    onClick: onClickSpy,\n  },\n  cy: () => {\n    onClickSpy.resetHistory();\n    cy.dataCy("button")\n      .click()\n      // So the spy itself is already called (you\'d probably just provide a normal function)\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n    // And then the important thing: actions object wraps that provided function in a spy\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // this time, it is the regex and no other stubs were created\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n  },\n};\n\nexport const SpyOnArgsWhichAreProvidedToFnSyntax: ComponentStoryCy<\n  typeof ClickCount\n> = (args) => <ClickCount {...args} />;\nSpyOnArgsWhichAreProvidedToFnSyntax.args = {\n  onClick: onClickSpy,\n};\nSpyOnArgsWhichAreProvidedToFnSyntax.cy = () => {\n  onClickSpy.resetHistory();\n  cy.dataCy("button")\n    .click()\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n  cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n  cy.get("@argTypesRegex.onClick").should("not.be.called");\n};\n\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    onClickSpy2.resetHistory();\n    cy.dataCy("button-2")\n      .click()\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\n    cy.get("@actions").its("onClick2").should("be.calledOnceWith", 0);\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex genereted stub\n    cy.get("@argTypesRegex.onClick2").should("be.calledOnceWith", 0);\n  },\n};\n',locationsMap:{"spy-on-args-which-are-provided-to-fn-syntax":{startLoc:{col:4,line:91},endLoc:{col:38,line:91},startBody:{col:4,line:91},endBody:{col:38,line:91}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.t,argTypes:{onClick:{action:"myClickStub"}},args:{onClick2:onClickSpy2}};var StubActionsDefinedOnDefaultExport={cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){cy.dataCy("count").should("contain",0),cy.dataCy("button").click(),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@myClickStub").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("not.be.called"),cy.dataCy("count").should("contain",1)})),parameters:{docs:{source:{code:'\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is `onClick`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // which is a nice-to-have, but is important during test b/c the stub\n    // for the regex is still created, its just overwritten\n    cy.get("@argTypesRegex.onClick").should("not.be.called");\n\n    cy.dataCy("count").should("contain", 1);\n  }\n};'}}}},SpyOnArgsWhichAreAlreadyProvided={args:{onClick:onClickSpy},cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){onClickSpy.resetHistory(),cy.dataCy("button").click().then((function(){return expect(onClickSpy).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("not.be.called")}))},SpyOnArgsWhichAreProvidedToFnSyntax=function SpyOnArgsWhichAreProvidedToFnSyntax(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.t,Object.assign({},args))};SpyOnArgsWhichAreProvidedToFnSyntax.displayName="SpyOnArgsWhichAreProvidedToFnSyntax",SpyOnArgsWhichAreProvidedToFnSyntax.args={onClick:onClickSpy},SpyOnArgsWhichAreProvidedToFnSyntax.cy=function(){onClickSpy.resetHistory(),cy.dataCy("button").click().then((function(){return expect(onClickSpy).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("not.be.called")};var SpyOnArgsWhichAreProvidedInDefaultExport={cy:function(_cy3){function cy(){return _cy3.apply(this,arguments)}return cy.toString=function(){return _cy3.toString()},cy}((function(){onClickSpy2.resetHistory(),cy.dataCy("button-2").click().then((function(){return expect(onClickSpy2).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick2").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick2").should("be.calledOnceWith",0)}))},__namedExportsOrder=["StubActionsDefinedOnDefaultExport","SpyOnArgsWhichAreAlreadyProvided","SpyOnArgsWhichAreProvidedToFnSyntax","SpyOnArgsWhichAreProvidedInDefaultExport"]},"./stories/StubActions/ExternalTests/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CallExplicitArgtypeActionStubAutomatically:()=>CallExplicitArgtypeActionStubAutomatically,CallImplicitArgtypeActionStubAutomaticallyViaRegex:()=>CallImplicitArgtypeActionStubAutomaticallyViaRegex,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={component:__webpack_require__("./stories/Button/index.tsx").t,cySkip:!0};var CallExplicitArgtypeActionStubAutomatically={argTypes:{onClick:{action:"myClickStub"}}},CallImplicitArgtypeActionStubAutomaticallyViaRegex={},__namedExportsOrder=["CallExplicitArgtypeActionStubAutomatically","CallImplicitArgtypeActionStubAutomaticallyViaRegex"]},"./stories/StubActions/PerStoryArgs.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CallExplicitArgtypeActionStubAutomatically:()=>CallExplicitArgtypeActionStubAutomatically,CallImplicitArgtypeActionStubAutomaticallyViaRegex:()=>CallImplicitArgtypeActionStubAutomaticallyViaRegex,CallWithExplicitStubAsPropToStory:()=>CallWithExplicitStubAsPropToStory,MockIfProvidedViaArgTypesRegardlessOfDocgen:()=>MockIfProvidedViaArgTypesRegardlessOfDocgen,MockIfProvidedViaArgsRegardlessOfDocgen:()=>MockIfProvidedViaArgsRegardlessOfDocgen,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _Button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:_Button__WEBPACK_IMPORTED_MODULE_4__.t};var CallExplicitArgtypeActionStubAutomatically={argTypes:{onClick:{action:"myClickStub"}},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){cy.dataCy("count").should("contain",0),cy.dataCy("button").click(),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@myClickStub").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("not.be.called"),cy.dataCy("count").should("contain",1)}))},CallImplicitArgtypeActionStubAutomaticallyViaRegex={cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){cy.dataCy("button").click(),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("be.calledOnceWith",0)}))},CallWithExplicitStubAsPropToStory={cyTest:function cyTest(Story){beforeEach((function(){cy.spy((function(){return 1})).as("beforeEachSpy")})),it("should call the spy and not the argTypesRegex stub",(function(){var _this=this;cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_5__.jsx)(Story,{onClick:this.beforeEachSpy})),cy.dataCy("button").click().then((function(){expect(_this.actions.onClick).to.have.callCount(0),expect(_this["argTypesRegex.onClick"]).to.have.callCount(0),expect(_this.beforeEachSpy).to.be.calledOnceWith(0)}))}))}},MockIfProvidedViaArgsRegardlessOfDocgen={args:{onSomethingElse:function onSomethingElse(){return 1}},cy:function(_cy3){function cy(){return _cy3.apply(this,arguments)}return cy.toString=function(){return _cy3.toString()},cy}((function(){cy.get("@actions").its("onSomethingElse").should("not.be.called"),cy.get("@argTypesRegex.onSomethingElse").should("not.be.called")})),parameters:{docs:{description:{story:"\nProves that you can mock without presence of docgen plugin as long as it comes in as an arg.\nProviding a mock not acceptable by typescript was easier than building a separate pipeline\nwithout docgen"}}}},MockIfProvidedViaArgTypesRegardlessOfDocgen={argTypes:{onSomethingElse:{action:"onSomethingElseAlias"}},cy:function(_cy4){function cy(){return _cy4.apply(this,arguments)}return cy.toString=function(){return _cy4.toString()},cy}((function(){cy.get("@actions").its("onSomethingElse").should("not.be.called"),cy.get("@onSomethingElseAlias").should("not.be.called")}))},__namedExportsOrder=["CallExplicitArgtypeActionStubAutomatically","CallImplicitArgtypeActionStubAutomaticallyViaRegex","CallWithExplicitStubAsPropToStory","MockIfProvidedViaArgsRegardlessOfDocgen","MockIfProvidedViaArgTypesRegardlessOfDocgen"]},"./stories/Untested.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ShouldMount:()=>ShouldMount,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import type { ComponentStory } from \\"@storybook/react\\";\\nimport React from \\"react\\";\\nimport { Button } from \\"./Button\\";\\n\\nexport default { component: Button };\\n\\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\nShouldMount.args = { label: \\"No cypress tests here\\" };\\nShouldMount.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\"Simply check if the component renders okay without extra cypress assertions\\",\\n    },\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"ShouldMount":{"startLoc":{"col":58,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":58,"line":7},"endBody":{"col":1,"line":9}}};\n    \nimport type { ComponentStory } from "@storybook/react";\nimport React from "react";\nimport { Button } from "./Button";\n\nexport default {parameters: {"storySource":{"source":"import type { ComponentStory } from \\"@storybook/react\\";\\nimport React from \\"react\\";\\nimport { Button } from \\"./Button\\";\\n\\nexport default { component: Button };\\n\\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\nShouldMount.args = { label: \\"No cypress tests here\\" };\\nShouldMount.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\"Simply check if the component renders okay without extra cypress assertions\\",\\n    },\\n  },\\n};\\n","locationsMap":{"should-mount":{"startLoc":{"col":58,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":58,"line":7},"endBody":{"col":1,"line":9}}}},}, component: Button };\n\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\nShouldMount.args = { label: "No cypress tests here" };\nShouldMount.parameters = {\n  docs: {\n    description: {\n      story:\n        "Simply check if the component renders okay without extra cypress assertions",\n    },\n  },\n};\n',locationsMap:{"should-mount":{startLoc:{col:58,line:15},endLoc:{col:1,line:17},startBody:{col:58,line:15},endBody:{col:1,line:17}}}}},_parameters.storySource={source:'import type { ComponentStory } from "@storybook/react";\nimport React from "react";\nimport { Button } from "./Button";\n\nexport default { component: Button };\n\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\nShouldMount.args = { label: "No cypress tests here" };\nShouldMount.parameters = {\n  docs: {\n    description: {\n      story:\n        "Simply check if the component renders okay without extra cypress assertions",\n    },\n  },\n};\n',locationsMap:{"should-mount":{startLoc:{col:58,line:7},endLoc:{col:1,line:9},startBody:{col:58,line:7},endBody:{col:1,line:9}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_2__.z};var ShouldMount=function ShouldMount(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.z,Object.assign({},args))};ShouldMount.displayName="ShouldMount",ShouldMount.args={label:"No cypress tests here"},ShouldMount.parameters={docs:{description:{story:"Simply check if the component renders okay without extra cypress assertions"}}};var __namedExportsOrder=["ShouldMount"]},"./stories/Button/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{z:()=>Button_Button,t:()=>ClickCount_ClickCount});var react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),Button_Button=function Button(_ref){var onClick=_ref.onClick,disabled=_ref.disabled,_ref$label=_ref.label,label=void 0===_ref$label?"click me":_ref$label,_ref$dataCy=_ref.dataCy,dataCy=void 0===_ref$dataCy?"button":_ref$dataCy;return(0,jsx_runtime.jsx)("button",{onClick,disabled,"data-cy":dataCy,children:label})};Button_Button.displayName="Button";try{Button_Button.displayName="Button",Button_Button.__docgenInfo={description:"Just a typical button really",displayName:"Button",props:{onClick:{defaultValue:null,description:"fire action on click",name:"onClick",required:!1,type:{name:"(() => void)"}},label:{defaultValue:{value:"click me"},description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:{value:"button"},description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/Button.tsx#Button"]={docgenInfo:Button_Button.__docgenInfo,name:"Button",path:"stories/Button/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _excluded=["onClick","onClick2"];function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var ClickCount_ClickCount=function ClickCount(_ref){var onClick=_ref.onClick,onClick2=_ref.onClick2,rest=_objectWithoutProperties(_ref,_excluded),_React$useState2=_slicedToArray(react.useState(0),2),clickCount=_React$useState2[0],setClickCount=_React$useState2[1],_React$useState4=_slicedToArray(react.useState(0),2),clickCount2=_React$useState4[0],setClickCount2=_React$useState4[1],handleClick=function handleClick(){var isCount=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(){isCount?(null==onClick||onClick(clickCount),setClickCount(clickCount+1)):(null==onClick2||onClick2(clickCount2),setClickCount2(clickCount+1))}};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("p",{"data-cy":"count",children:["Count is ",clickCount]}),(0,jsx_runtime.jsx)(Button_Button,Object.assign({onClick:handleClick()},rest)),(0,jsx_runtime.jsxs)("p",{"data-cy":"count-2",children:["Count 2 is ",clickCount2]}),(0,jsx_runtime.jsx)(Button_Button,Object.assign({dataCy:"button-2",onClick:handleClick(!1)},rest))]})};try{ClickCount_ClickCount.displayName="ClickCount",ClickCount_ClickCount.__docgenInfo={description:"Two buttons which show individual click counts",displayName:"ClickCount",props:{onClick:{defaultValue:null,description:"fire action on click\nfire action on click with previous click count",name:"onClick",required:!1,type:{name:"((() => void) & ((prevClickCount: number) => void))"}},label:{defaultValue:null,description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:null,description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}},onClick2:{defaultValue:null,description:"fire a second action with a different count",name:"onClick2",required:!1,type:{name:"((prevClickCount2: number) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/ClickCount.tsx#ClickCount"]={docgenInfo:ClickCount_ClickCount.__docgenInfo,name:"ClickCount",path:"stories/Button/ClickCount.tsx#ClickCount"})}catch(__react_docgen_typescript_loader_error){}try{Button.displayName="Button",Button.__docgenInfo={description:"Just a typical button really",displayName:"Button",props:{onClick:{defaultValue:null,description:"fire action on click",name:"onClick",required:!1,type:{name:"(() => void)"}},label:{defaultValue:{value:"click me"},description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:{value:"button"},description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/index.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"stories/Button/index.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}try{ClickCount.displayName="ClickCount",ClickCount.__docgenInfo={description:"Two buttons which show individual click counts",displayName:"ClickCount",props:{onClick:{defaultValue:null,description:"fire action on click\nfire action on click with previous click count",name:"onClick",required:!1,type:{name:"((() => void) & ((prevClickCount: number) => void))"}},label:{defaultValue:null,description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:null,description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}},onClick2:{defaultValue:null,description:"fire a second action with a different count",name:"onClick2",required:!1,type:{name:"((prevClickCount2: number) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/index.tsx#ClickCount"]={docgenInfo:ClickCount.__docgenInfo,name:"ClickCount",path:"stories/Button/index.tsx#ClickCount"})}catch(__react_docgen_typescript_loader_error){}},"./storybook-init-framework-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/@storybook/react/dist/esm/client/index.js")},"./stories/FileFormats/ExternalTest/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_index_stories__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./stories/FileFormats/ExternalTest/index.stories.tsx"),_Button__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./stories/Button/index.tsx"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{title:"File Formats/External Test",component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,id:"external-test",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"defining-tests-in-an-external-file"},"Defining Tests in an External File"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.oG,{story:_index_stories__WEBPACK_IMPORTED_MODULE_8__.ExternalTest,id:"external-test",mdxType:"Story"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"In an external file, you could write a test which used composeStories\nand cy.mount explicitly. In fact, you could do this entirely without this package."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-tsx"},'import { composeStories } from "@storybook/react";\nimport React from "react";\nimport * as stories from "./index.stories";\n\nconst { ExternalTest } = composeStories(stories);\n\ndescribe("External test file", () => {\n  it("should contain the external label", () => {\n    cy.mount(<ExternalTest />);\n    cy.dataCy("button").should(\n      "contain",\n      "Will be tested in external .cy file"\n    );\n  });\n});\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"If the stories feature mdx docs according to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md",target:"_blank",rel:"nofollow noopener noreferrer"},"this recipe")," (although actually you'll want to include the default export and add ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories: []")," which it hints at), then you'll want to override the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories")," in the test file so that ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"composeStories")," can find the proper tests. That is in fact what this ExternalTest is doing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"// this is necessary b/c stories here have mdx generated docs\ndelete (stories.default as { includeStories?: string[] }).includeStories;\nconst { ExternalTest } = composeStories(stories);\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"In the story file, define stories exactly as you normally would, although you may\nwant to skip automatic test execution."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"export default {\n  component: Button,\n  // otherwise this would do a mount test like Untested.stories.tsx\n  // which would be fine in this case, just redundant\n  cySkip: true,\n};\n\nexport const ExternalTest: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"File Formats/External Test",id:"external-test",component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/MDX/DocsInMDX/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_index_stories__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./stories/MDX/DocsInMDX/index.stories.tsx"),_Button__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./stories/Button/index.tsx"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,id:"docs-in-mdx",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"defining-documentation-in-mdx-files"},"Defining Documentation in MDX files"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.oG,{story:_index_stories__WEBPACK_IMPORTED_MODULE_8__.DocsInMDX,id:"docs-in-mdx",mdxType:"Story"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"The storybook preferred way of writing stories in CSF format but adding documentation in MDX files is to follow ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs",target:"_blank",rel:"nofollow noopener noreferrer"},"this recipe"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"For cypress tests purposes, we'll want to include the default export but then add ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories: []"),", which is a pattern hinted at in that documentation but which must have changed slightly. However, for automatic testing purposes, that will be a problem for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"composeStories"),". As such, you should add ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"cyIncludeStories: true")," to your default export. For this repo specifically, we don't want to show the component itself in the docs, so we set ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"parameters.docs.disable")," to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"true"),". All in, the story file looks like this"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\nimport { Button } from "../../Button";\n\n// eslint-disable-next-line storybook/story-exports\nexport default {\n  component: Button,\n  // mdx generated docs\n  includeStories: [],\n  cyIncludeStories: true,\n};\n\nexport const DocsInMDX: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\nDocsInMDX.args = {\n  label: "Documentation provided by mdx file while component is written in csf",\n};\n// don\'t show the component in the docs created by mdx\nDocsInMDX.parameters = {\n  docs: { disable: true },\n};\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"and the MDX file looks like, well..., this file. But here's a snippet:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Meta, Story } from '@storybook/addon-docs';\nimport * as stories from './index.stories';\nimport { Button } from '../../Button';\n\n<Meta title=\"Docs In MDX\" component={Button} />\n\n# Defining Documentation in MDX files\n\n<Story story={stories.DocsInMDX} />\n\nThe storybook preferred way of writing stories in CSF format but adding documentation in MDX files...\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"/docs/external-test"},"External Test")," for another example and one in which the tests are external, and so don't need the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"cyIncludeStories")," but which will need to override the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories")," manually."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={id:"docs-in-mdx",component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/MDX/MDXFileWithExternalTests/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__,mdxFileWithExternalTests:()=>mdxFileWithExternalTests});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/index.js"),_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_Button__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./stories/Button/index.tsx"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{title:"MDX/MDXFileWithExternalTests",component:_Button__WEBPACK_IMPORTED_MODULE_8__.t,id:"mdx-file-with-external-tests",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"defining-stories-in-mdx"},"Defining Stories in MDX"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"You can define stories in MDX format! I really didn't think this'd work, but if you mimic storybook's own webpack rules for .mdx files, then they acte exactly like CSF files."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import { Meta, Story } from \'@storybook/addon-docs\';\nimport { ClickCount } from \'../../Button\';\n\n<Meta title="MDX/MDXFileWithExternalTests" component={ClickCount} />\n\n# Whatever Markdown\n\n<Story name="MDXFileWithExternalTests">\n  {(args) => (\n    <>\n      <div>This is a story</div>\n      <ClickCount label="In MDX" {...args} />\n    </>\n  )}\n</Story>\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.oG,{name:"MDXFileWithExternalTests",parameters:{docs:{disable:!0}},mdxType:"Story"},(function(args){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(react__WEBPACK_IMPORTED_MODULE_5__.Fragment,null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("div",null,"This is a story"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_Button__WEBPACK_IMPORTED_MODULE_8__.t,_extends({label:"In MDX"},args,{mdxType:"ClickCount"})))})),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"And the test would look like this:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import { composeStories } from "@storybook/react";\nimport React from "react";\n// @ts-ignore\nimport * as stories from "./index.stories.mdx";\n\nconst { mdxFileWithExternalTests: MDXFileWithExternalTests } =\n  composeStories(stories);\n\ndescribe("External test file", () => {\n  it("should contain the external label", () => {\n    const onClick = cy.stub();\n    cy.mount(<MDXFileWithExternalTests onClick={onClick} />);\n    cy.dataCy("button").should("contain", "In MDX");\n    cy.dataCy("button")\n      .click()\n      .then(() => expect(onClick).to.be.calledOnceWith(0));\n  });\n});\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",{id:"caveats"},"Caveats"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"Component name comes in camelCased."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"automatic action stubs does not work, nor does a manual ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"li"},"stubStoryActions"),", only directly passing arguments")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",{id:"webpack-config-in-cypressconfigts"},"Webpack config in cypress.config.ts"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import webpackConfig from "./webpack.config";\n\n// ...\n\nwebpackConfig.module.rules.push({\n  test: /\\.mdx$/,\n  use: [\n    {\n      loader: "babel-loader",\n      options: {\n        babelrc: false,\n        configFile: false,\n        sourceType: "unambiguous",\n        presets: ["@babel/preset-env", "@babel/preset-react"],\n        // possible copying over more could help with caveats or fix edgecases I\'ve yet to find\n      },\n    },\n    {\n      loader: require.resolve("@storybook/mdx1-csf/loader"),\n      options: { skipCsf: false },\n      // same here, there were two `remark` options\n    },\n  ],\n});\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: "react",\n      bundler: "webpack",\n      webpackConfig,\n    },\n    // ...\n  }\n});\n')))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var mdxFileWithExternalTests=function mdxFileWithExternalTests(args){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(react__WEBPACK_IMPORTED_MODULE_5__.Fragment,null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("div",null,"This is a story"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_Button__WEBPACK_IMPORTED_MODULE_8__.t,_extends({label:"In MDX"},args)))};mdxFileWithExternalTests.storyName="MDXFileWithExternalTests",mdxFileWithExternalTests.parameters=Object.assign({storySource:{source:'args => <>\n      <div>This is a story</div>\n      <ClickCount label="In MDX" {...args} />\n    </>'}},{docs:{disable:!0}});var componentMeta={title:"MDX/MDXFileWithExternalTests",id:"mdx-file-with-external-tests",component:_Button__WEBPACK_IMPORTED_MODULE_8__.t,includeStories:["mdxFileWithExternalTests"]},mdxStoryNameToKey={MDXFileWithExternalTests:"mdxFileWithExternalTests"};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["mdxFileWithExternalTests"]},"./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./BeforeEach.stories.tsx":"./stories/BeforeEach.stories.tsx","./FileFormats/ExternalTest/index.stories.tsx":"./stories/FileFormats/ExternalTest/index.stories.tsx","./FileFormats/StorybookFiles.stories.tsx":"./stories/FileFormats/StorybookFiles.stories.tsx","./MDX/CSFStoriesWithArbitraryMDX/index.stories.tsx":"./stories/MDX/CSFStoriesWithArbitraryMDX/index.stories.tsx","./MDX/DocsInMDX/index.stories.tsx":"./stories/MDX/DocsInMDX/index.stories.tsx","./SkippingAndSelecting/FullySkipped.stories.tsx":"./stories/SkippingAndSelecting/FullySkipped.stories.tsx","./SkippingAndSelecting/IgnoringViaCyIncludeStories.stories.tsx":"./stories/SkippingAndSelecting/IgnoringViaCyIncludeStories.stories.tsx","./SkippingAndSelecting/Only.stories.tsx":"./stories/SkippingAndSelecting/Only.stories.tsx","./SkippingAndSelecting/SkippedStories.stories.tsx":"./stories/SkippingAndSelecting/SkippedStories.stories.tsx","./StubActions/BeforeEach.stories.tsx":"./stories/StubActions/BeforeEach.stories.tsx","./StubActions/ExternalTests/index.stories.tsx":"./stories/StubActions/ExternalTests/index.stories.tsx","./StubActions/PerStoryArgs.stories.tsx":"./stories/StubActions/PerStoryArgs.stories.tsx","./Untested.stories.tsx":"./stories/Untested.stories.tsx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$"},"./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./FileFormats/ExternalTest/index.stories.mdx":"./stories/FileFormats/ExternalTest/index.stories.mdx","./MDX/DocsInMDX/index.stories.mdx":"./stories/MDX/DocsInMDX/index.stories.mdx","./MDX/MDXFileWithExternalTests/index.stories.mdx":"./stories/MDX/MDXFileWithExternalTests/index.stories.mdx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$"},"?4f7e":()=>{},"./generated-stories-entry.cjs":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module=__webpack_require__.nmd(module),(0,__webpack_require__("./node_modules/@storybook/react/dist/esm/client/index.js").configure)([__webpack_require__("./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$"),__webpack_require__("./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")],module,!1)}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[556],(()=>(__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_exec__("./storybook-init-framework-entry.js"),__webpack_exec__("./node_modules/@storybook/react/dist/esm/client/docs/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/react/dist/esm/client/preview/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-links/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-actions/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-backgrounds/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-measure/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-outline/preview.js-generated-config-entry.js"),__webpack_exec__("./.storybook/preview.ts-generated-config-entry.js"),__webpack_exec__("./generated-stories-entry.cjs"))));__webpack_require__.O()}]);