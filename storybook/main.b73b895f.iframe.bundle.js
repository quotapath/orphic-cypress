(self.webpackChunkorphic_cypress=self.webpackChunkorphic_cypress||[]).push([[179],{"./.storybook/preview.ts-generated-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,{__namedExportsOrder:()=>__namedExportsOrder,parameters:()=>parameters});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),esm=__webpack_require__("./node_modules/@storybook/theming/dist/esm/index.js"),dist_esm=(__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js")),react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),CustomDocsStory=function CustomDocsStory(_ref){var description,_docs$description,id=_ref.id,name=_ref.name,_ref$expanded=_ref.expanded,expanded=void 0===_ref$expanded||_ref$expanded,_ref$parameters=_ref.parameters,parameters=void 0===_ref$parameters?{}:_ref$parameters,docs=parameters.docs;expanded&&docs&&(description=null===(_docs$description=docs.description)||void 0===_docs$description?void 0:_docs$description.story);var subheading=expanded&&name;return(0,jsx_runtime.jsxs)(dist_esm.ee,{storyId:null!=id?id:"",children:[subheading&&(0,jsx_runtime.jsx)(dist_esm.pm,{children:subheading}),description&&(0,jsx_runtime.jsx)(dist_esm.dk,{markdown:description}),(0,jsx_runtime.jsx)(dist_esm.Xz,{children:(0,jsx_runtime.jsx)(dist_esm.oG,{id,parameters})})]})};CustomDocsStory.displayName="CustomDocsStory";var CustomStories=function CustomStories(){var _stories,stories=(0,(0,react.useContext)(dist_esm.hv).componentStories)();return(stories=stories.filter((function(story){var _story$parameters,_story$parameters$doc;return!(null!==(_story$parameters=story.parameters)&&void 0!==_story$parameters&&null!==(_story$parameters$doc=_story$parameters.docs)&&void 0!==_story$parameters$doc&&_story$parameters$doc.disable)})))&&0!==(null===(_stories=stories)||void 0===_stories?void 0:_stories.length)?(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:stories.map((function(story){return story&&(0,jsx_runtime.jsx)(CustomDocsStory,Object.assign({},story,{expanded:!0}),story.id)}))}):null},DocsPage=function DocsPage(_ref2){var children=_ref2.children;return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist_esm.Dx,{}),(0,jsx_runtime.jsx)(CustomStories,{}),children]})};try{CustomDocsStory.displayName="CustomDocsStory",CustomDocsStory.__docgenInfo={description:"",displayName:"CustomDocsStory",props:{expanded:{defaultValue:{value:"true"},description:"",name:"expanded",required:!1,type:{name:"boolean"}},withToolbar:{defaultValue:null,description:"",name:"withToolbar",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/storybook/page.tsx#CustomDocsStory"]={docgenInfo:CustomDocsStory.__docgenInfo,name:"CustomDocsStory",path:"src/storybook/page.tsx#CustomDocsStory"})}catch(__react_docgen_typescript_loader_error){}try{DocsPage.displayName="DocsPage",DocsPage.__docgenInfo={description:"This storybook uses nearly the same components for every story as a mechanism\nfor testing. So we can forgo showing the arg table or component at all, opting\ninstead just for the story's description and code block, if provided (default\ncode blocks were essentially useless)",displayName:"DocsPage",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/storybook/page.tsx#DocsPage"]={docgenInfo:DocsPage.__docgenInfo,name:"DocsPage",path:"src/storybook/page.tsx#DocsPage"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__("./node_modules/core-js/modules/es.array.join.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.constructor.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.exec.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.string.match-all.js"),__webpack_require__("./node_modules/core-js/modules/es.string.split.js"),__webpack_require__("./node_modules/core-js/modules/es.string.replace.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find-index.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.array.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.string.includes.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js");function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var regex_init="(//|/\\*+)(\\s+)?story-code(\\s+?)",regex_includeStart="@include-start",regex_includeDefault="@include-default",skipRegex=function getSkipRegex(){var skipJoin=["end","start","next"].map((function(name){return"(?<"+name+">-"+name+")"})).join("|");return new RegExp(regex_init+"@skip("+skipJoin+")?","gm")}(),removeSkips=function removeSkips(codeLines){var _step,skip={next:!1,block:!1},lines=[],_iterator=function _createForOfIteratorHelper(o,allowArrayLike){var it="undefined"!=typeof Symbol&&o[Symbol.iterator]||o["@@iterator"];if(!it){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&"number"==typeof o.length){it&&(o=it);var i=0,F=function F(){};return{s:F,n:function n(){return i>=o.length?{done:!0}:{done:!1,value:o[i++]}},e:function e(_e){throw _e},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var err,normalCompletion=!0,didErr=!1;return{s:function s(){it=it.call(o)},n:function n(){var step=it.next();return normalCompletion=step.done,step},e:function e(_e2){didErr=!0,err=_e2},f:function f(){try{normalCompletion||null==it.return||it.return()}finally{if(didErr)throw err}}}}(codeLines);try{for(_iterator.s();!(_step=_iterator.n()).done;){var _line$matchAll$next$v,_groups2,_groups3,_groups,line=_step.value,groups=null===(_line$matchAll$next$v=line.matchAll(skipRegex).next().value)||void 0===_line$matchAll$next$v?void 0:_line$matchAll$next$v.groups;if(skip.block)null!==(_groups=groups)&&void 0!==_groups&&_groups.end&&(skip.block=!1);else null!==(_groups2=groups)&&void 0!==_groups2&&_groups2.start?skip.block=!0:null!==(_groups3=groups)&&void 0!==_groups3&&_groups3.next?skip.next=!0:skip.next?skip.next=!1:void 0===groups&&lines.push(line)}}catch(err){_iterator.e(err)}finally{_iterator.f()}return lines},parameters={docs:{page:DocsPage,source:{state:"open"},transformSource:function transformSource(snippet,storyContext){try{var _storyContext$paramet=storyContext.parameters.storySource,source=_storyContext$paramet.source,locationsMap=_storyContext$paramet.locationsMap,componentName=storyContext.originalStoryFn.name,location=locationsMap[storyContext.id.split("--")[1]],allLines=source.split("\n");if(!location){componentName=storyContext.name.replace(/ /g,"");var startIndex=allLines.findIndex((function(line){return new RegExp("export const "+componentName).test(line)}));location={startLoc:{col:0,line:startIndex},endLoc:{col:0,line:allLines.slice(startIndex).findIndex((function(line){return/^};/.test(line)}))+startIndex+1}}}var linesFromStart=allLines.slice(location.startLoc.line-1),endLine=linesFromStart.findIndex((function(line){return new RegExp(regex_init+"@end(\\s+)?($|@|"+componentName+")").test(line)})),endLoc=endLine>0?endLine:location.endLoc.line-location.startLoc.line+1,includeDefault=new RegExp(regex_includeDefault).test(linesFromStart[endLine])||new RegExp(""+regex_init+regex_includeDefault).test(linesFromStart[endLoc]),includeStart=new RegExp(regex_includeStart).test(linesFromStart[endLine])||new RegExp(""+regex_init+regex_includeStart).test(linesFromStart[endLoc]),defaultLines=[];if(includeDefault||includeStart){var defaultStartIndex=allLines.findIndex((function(line){return/export default {/.test(line)}));if(-1!==defaultStartIndex){var _allLines$defaultStar,linesFromDefaultStart=includeStart?allLines:allLines.slice(defaultStartIndex);if(null!==(_allLines$defaultStar=allLines[defaultStartIndex])&&void 0!==_allLines$defaultStar&&_allLines$defaultStar.includes("};"))defaultLines=[].concat(_toConsumableArray(linesFromDefaultStart.slice(0,defaultStartIndex+1)),[""]);else{var endDefaultLine=linesFromDefaultStart.findIndex((function(line){return/^};$/.test(line)}));endDefaultLine>0&&""!==(defaultLines=linesFromDefaultStart.slice(0,endDefaultLine+1)).at(-1)&&(defaultLines=[].concat(_toConsumableArray(defaultLines),[""]))}}}return removeSkips([].concat(_toConsumableArray(defaultLines),_toConsumableArray(linesFromStart.slice(0,endLoc)))).join("\n")}catch(e){return console.log(e),snippet}},theme:esm.np.dark},viewMode:"docs",actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/},expanded:!0,hideNoControlsWarning:!0},options:{storySort:{order:["Overview","FileFormats","StubActions",["Overview"],"SkippingAndSelecting",["Overview"],"MDX"]}}},__namedExportsOrder=["parameters"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return(0,ClientApi.uc)(value);case"argTypes":return(0,ClientApi.v9)(value);case"decorators":return value.forEach((function(decorator){return(0,ClientApi.$9)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return(0,ClientApi.HZ)(loader,!1)}));case"parameters":return(0,ClientApi.h1)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return(0,ClientApi.My)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return(0,ClientApi._C)(enhancer)}));case"render":return(0,ClientApi.$P)(value);case"globals":case"globalTypes":var v={};return v[key]=value,(0,ClientApi.h1)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./stories/FileFormats/CypressTestHooksLikeBeforeEach.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CyTestFunctionBody:()=>CyTestFunctionBody,DefaultCyProperty:()=>DefaultCyProperty,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cy: () => {\\n    beforeEach(() => {\\n      // just something simple to prove this happens at top\\n      cy.wrap(\\"DefaultCyProperty label\\").as(\\"wrappedLabel\\");\\n    });\\n  },\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const DefaultCyProperty: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"DefaultCyProperty label\\" />\\n);\\n\\nDefaultCyProperty.cy = () => {\\n  cy.get(\\"@wrappedLabel\\").then((wrappedLabel) =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", wrappedLabel)\\n  );\\n  cy.wrap(\\"This will be reset\\").as(\\"wrappedLabel\\");\\n};\\n// story-code @end @include-default\\n\\nDefaultCyProperty.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nYou can use default export\'s \\\\`cy\\\\` property to do things like execute\\nhooks such as \\\\`beforeEach\\\\` to establish test state.`,\\n    },\\n  },\\n};\\n\\nexport const CyTestFunctionBody: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\n\\nCyTestFunctionBody.cyTest = (Story) => {\\n  beforeEach(() => {\\n    cy.wrap(\\"Before Wrapped label\\").as(\\"beforeWrappedLabel\\");\\n  });\\n\\n  it(\\"should get label arg from default export beforeEach setup\\", function () {\\n    // function keyword + this instead of .get(\\"@alias\\") just to show variant\\n    cy.mount(<Story label={this.wrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.wrappedLabel);\\n  });\\n\\n  it(\\"should get label arg from beforeEach in local cyTest\\", function () {\\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.beforeWrappedLabel);\\n  });\\n};\\n// story-code @end\\n\\nCyTestFunctionBody.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\\nwhich is the only way to have such hooks execute for only specific story tests.`,\\n    },\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"DefaultCyProperty":{"startLoc":{"col":66,"line":18},"endLoc":{"col":1,"line":20},"startBody":{"col":66,"line":18},"endBody":{"col":1,"line":20}},"CyTestFunctionBody":{"startLoc":{"col":67,"line":40},"endLoc":{"col":1,"line":42},"startBody":{"col":67,"line":40},"endBody":{"col":1,"line":42}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cy: () => {\\n    beforeEach(() => {\\n      // just something simple to prove this happens at top\\n      cy.wrap(\\"DefaultCyProperty label\\").as(\\"wrappedLabel\\");\\n    });\\n  },\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const DefaultCyProperty: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"DefaultCyProperty label\\" />\\n);\\n\\nDefaultCyProperty.cy = () => {\\n  cy.get(\\"@wrappedLabel\\").then((wrappedLabel) =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", wrappedLabel)\\n  );\\n  cy.wrap(\\"This will be reset\\").as(\\"wrappedLabel\\");\\n};\\n// story-code @end @include-default\\n\\nDefaultCyProperty.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nYou can use default export\'s \\\\`cy\\\\` property to do things like execute\\nhooks such as \\\\`beforeEach\\\\` to establish test state.`,\\n    },\\n  },\\n};\\n\\nexport const CyTestFunctionBody: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\n\\nCyTestFunctionBody.cyTest = (Story) => {\\n  beforeEach(() => {\\n    cy.wrap(\\"Before Wrapped label\\").as(\\"beforeWrappedLabel\\");\\n  });\\n\\n  it(\\"should get label arg from default export beforeEach setup\\", function () {\\n    // function keyword + this instead of .get(\\"@alias\\") just to show variant\\n    cy.mount(<Story label={this.wrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.wrappedLabel);\\n  });\\n\\n  it(\\"should get label arg from beforeEach in local cyTest\\", function () {\\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", this.beforeWrappedLabel);\\n  });\\n};\\n// story-code @end\\n\\nCyTestFunctionBody.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\\nwhich is the only way to have such hooks execute for only specific story tests.`,\\n    },\\n  },\\n};\\n","locationsMap":{"default-cy-property":{"startLoc":{"col":66,"line":18},"endLoc":{"col":1,"line":20},"startBody":{"col":66,"line":18},"endBody":{"col":1,"line":20}},"cy-test-function-body":{"startLoc":{"col":67,"line":40},"endLoc":{"col":1,"line":42},"startBody":{"col":67,"line":40},"endBody":{"col":1,"line":42}}}},},\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("DefaultCyProperty label").as("wrappedLabel");\n    });\n  },\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const DefaultCyProperty: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="DefaultCyProperty label" />\n);;\n\nDefaultCyProperty.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};\n// story-code @end @include-default\n\nDefaultCyProperty.parameters = {\n  docs: {\n    description: {\n      story: `\nYou can use default export\'s \\`cy\\` property to do things like execute\nhooks such as \\`beforeEach\\` to establish test state.`,\n    },\n  },\n};\n\nexport const CyTestFunctionBody: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\n\nCyTestFunctionBody.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};\n// story-code @end\n\nCyTestFunctionBody.parameters = {\n  docs: {\n    description: {\n      story: `\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\nwhich is the only way to have such hooks execute for only specific story tests.`,\n    },\n  },\n};\n',locationsMap:{"default-cy-property":{startLoc:{col:66,line:26},endLoc:{col:1,line:28},startBody:{col:66,line:26},endBody:{col:1,line:28}},"cy-test-function-body":{startLoc:{col:67,line:48},endLoc:{col:1,line:50},startBody:{col:67,line:48},endBody:{col:1,line:50}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {\n  component: Button,\n  cy: () => {\n    beforeEach(() => {\n      // just something simple to prove this happens at top\n      cy.wrap("DefaultCyProperty label").as("wrappedLabel");\n    });\n  },\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const DefaultCyProperty: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="DefaultCyProperty label" />\n);\n\nDefaultCyProperty.cy = () => {\n  cy.get("@wrappedLabel").then((wrappedLabel) =>\n    cy.dataCy("button").should("contain", wrappedLabel)\n  );\n  cy.wrap("This will be reset").as("wrappedLabel");\n};\n// story-code @end @include-default\n\nDefaultCyProperty.parameters = {\n  docs: {\n    description: {\n      story: `\nYou can use default export\'s \\`cy\\` property to do things like execute\nhooks such as \\`beforeEach\\` to establish test state.`,\n    },\n  },\n};\n\nexport const CyTestFunctionBody: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} />\n);\n\nCyTestFunctionBody.cyTest = (Story) => {\n  beforeEach(() => {\n    cy.wrap("Before Wrapped label").as("beforeWrappedLabel");\n  });\n\n  it("should get label arg from default export beforeEach setup", function () {\n    // function keyword + this instead of .get("@alias") just to show variant\n    cy.mount(<Story label={this.wrappedLabel} />);\n    cy.dataCy("button").should("contain", this.wrappedLabel);\n  });\n\n  it("should get label arg from beforeEach in local cyTest", function () {\n    cy.mount(<Story label={this.beforeWrappedLabel} />);\n    cy.dataCy("button").should("contain", this.beforeWrappedLabel);\n  });\n};\n// story-code @end\n\nCyTestFunctionBody.parameters = {\n  docs: {\n    description: {\n      story: `\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\nwhich is the only way to have such hooks execute for only specific story tests.`,\n    },\n  },\n};\n',locationsMap:{"default-cy-property":{startLoc:{col:66,line:18},endLoc:{col:1,line:20},startBody:{col:66,line:18},endBody:{col:1,line:20}},"cy-test-function-body":{startLoc:{col:67,line:40},endLoc:{col:1,line:42},startBody:{col:67,line:40},endBody:{col:1,line:42}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){beforeEach((function(){cy.wrap("DefaultCyProperty label").as("wrappedLabel")}))}))};var DefaultCyProperty=function DefaultCyProperty(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"DefaultCyProperty label"}))};DefaultCyProperty.displayName="DefaultCyProperty",DefaultCyProperty.cy=function(){cy.get("@wrappedLabel").then((function(wrappedLabel){return cy.dataCy("button").should("contain",wrappedLabel)})),cy.wrap("This will be reset").as("wrappedLabel")},DefaultCyProperty.parameters={docs:{description:{story:"\nYou can use default export's `cy` property to do things like execute\nhooks such as `beforeEach` to establish test state."}}};var CyTestFunctionBody=function CyTestFunctionBody(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args))};CyTestFunctionBody.displayName="CyTestFunctionBody",CyTestFunctionBody.cyTest=function(Story){beforeEach((function(){cy.wrap("Before Wrapped label").as("beforeWrappedLabel")})),it("should get label arg from default export beforeEach setup",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{label:this.wrappedLabel})),cy.dataCy("button").should("contain",this.wrappedLabel)})),it("should get label arg from beforeEach in local cyTest",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{label:this.beforeWrappedLabel})),cy.dataCy("button").should("contain",this.beforeWrappedLabel)}))},CyTestFunctionBody.parameters={docs:{description:{story:"\nThe .cyTest format can contain hooks like beforeEach directly inside its function body,\nwhich is the only way to have such hooks execute for only specific story tests."}}};var __namedExportsOrder=["DefaultCyProperty","CyTestFunctionBody"]},"./stories/FileFormats/ExternalTest/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ExternalTest:()=>ExternalTest,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:_Button__WEBPACK_IMPORTED_MODULE_2__.z,cyIncludeStories:[],includeStories:[]};var ExternalTest=function ExternalTest(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.z,Object.assign({},args))};ExternalTest.displayName="ExternalTest",ExternalTest.args={label:"Will be tested in external .cy file"},ExternalTest.parameters={docs:{disable:!0}};var __namedExportsOrder=["ExternalTest"]},"./stories/FileFormats/StandardCSFButAutomaticallyRenderTested.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ShouldMount:()=>ShouldMount,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import type { ComponentStory } from \\"@storybook/react\\";\\nimport React from \\"react\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\nShouldMount.args = { label: \\"No cypress tests here\\" };\\n// story-code @end @include-start\\nShouldMount.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\"Simply check if the component renders okay without extra cypress assertions\\",\\n    },\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"ShouldMount":{"startLoc":{"col":58,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":58,"line":7},"endBody":{"col":1,"line":9}}};\n    \nimport type { ComponentStory } from "@storybook/react";\nimport React from "react";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import type { ComponentStory } from \\"@storybook/react\\";\\nimport React from \\"react\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\\n  <Button {...args} />\\n);\\nShouldMount.args = { label: \\"No cypress tests here\\" };\\n// story-code @end @include-start\\nShouldMount.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\"Simply check if the component renders okay without extra cypress assertions\\",\\n    },\\n  },\\n};\\n","locationsMap":{"should-mount":{"startLoc":{"col":58,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":58,"line":7},"endBody":{"col":1,"line":9}}}},}, component: Button };\n\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\nShouldMount.args = { label: "No cypress tests here" };\n// story-code @end @include-start\nShouldMount.parameters = {\n  docs: {\n    description: {\n      story:\n        "Simply check if the component renders okay without extra cypress assertions",\n    },\n  },\n};\n',locationsMap:{"should-mount":{startLoc:{col:58,line:15},endLoc:{col:1,line:17},startBody:{col:58,line:15},endBody:{col:1,line:17}}}}},_parameters.storySource={source:'import type { ComponentStory } from "@storybook/react";\nimport React from "react";\nimport { Button } from "../Button";\n\nexport default { component: Button };\n\nexport const ShouldMount: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\nShouldMount.args = { label: "No cypress tests here" };\n// story-code @end @include-start\nShouldMount.parameters = {\n  docs: {\n    description: {\n      story:\n        "Simply check if the component renders okay without extra cypress assertions",\n    },\n  },\n};\n',locationsMap:{"should-mount":{startLoc:{col:58,line:7},endLoc:{col:1,line:9},startBody:{col:58,line:7},endBody:{col:1,line:9}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_2__.z};var ShouldMount=function ShouldMount(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.z,Object.assign({},args))};ShouldMount.displayName="ShouldMount",ShouldMount.args={label:"No cypress tests here"},ShouldMount.parameters={docs:{description:{story:"Simply check if the component renders okay without extra cypress assertions"}}};var __namedExportsOrder=["ShouldMount"]},"./stories/FileFormats/StorybookFiles.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{StoryFunctionWithCyFunction:()=>StoryFunctionWithCyFunction,StoryFunctionWithCyObject:()=>StoryFunctionWithCyObject,StoryFunctionWithCyTest:()=>StoryFunctionWithCyTest,StoryObjectWithCyFunction:()=>StoryObjectWithCyFunction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  id: \\"fileformats-storybookfiles\\", // story-code @skip\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story function\\" />;\\n\\nStoryFunctionWithCyFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n// story-code @end @include-default\\nStoryFunctionWithCyFunction.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\".cy is the simplest format, expecting just a function which executes in cypress\\",\\n    },\\n  },\\n};\\n\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\nStoryFunctionWithCyObject.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n.cy also allows an object syntax where the text keys become the input for cypress \\\\`it\\\\`\'s\\nand the bodies execute within their own tests.\\n\\n\\\\`\\\\`\\\\`tsx\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\\\`\\\\`\\\\`\\n\\nbecomes\\n\\n\\\\`\\\\`\\\\`tsx\\ndescribe(\\"Story Function With Cy Object\\", () => {\\n  it(\\"should contain \'Story object\' label\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\")\\n  );\\n\\n  it(\\"should not be disabled by default\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\")\\n  );\\n});\\n\\\\`\\\\`\\\\`\\n`,\\n    },\\n    source: { code: null },\\n  },\\n};\\n\\n// Could accept args, but label is required, so just showing a non-args version\\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button label=\\"Story test\\" {...args} />;\\n\\nStoryFunctionWithCyTest.cyTest = (Story) => {\\n  it(\\"should contain \'Story test\' label\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story test\\");\\n  });\\n\\n  it(\\"should accept a disabled prop\\", () => {\\n    cy.mount(<Story disabled />);\\n    cy.dataCy(\\"button\\").should(\\"be.disabled\\");\\n  });\\n\\n  it.skip(\\"should skip a test\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\n      \\"contain\\",\\n      \\"This test would fail if not skipped\\"\\n    );\\n  });\\n};\\n// story-code @end\\nStoryFunctionWithCyTest.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n.cyTest offers the most control and is the most verbose.\\nIt allows executing test hooks like beforeEach, calling it.skip,\\nor passing new arguments to the story at each test, but requires\\nmanually calling cy.mount on the component that comes in as an argument.`,\\n    },\\n  },\\n};\\n\\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\\n  args: { label: \\"Story function\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\"),\\n  // story-code @skip-start\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: `\\n.cy is the most concise testing syntax and CSF object syntax is the most concise\\nstory format. Together, they can make for some truly small but powerful tests.`,\\n      },\\n    },\\n  },\\n  // story-code @skip-end\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"StoryFunctionWithCyFunction":{"startLoc":{"col":76,"line":13},"endLoc":{"col":48,"line":15},"startBody":{"col":76,"line":13},"endBody":{"col":48,"line":15}},"StoryFunctionWithCyObject":{"startLoc":{"col":74,"line":29},"endLoc":{"col":46,"line":31},"startBody":{"col":74,"line":29},"endBody":{"col":46,"line":31}},"StoryFunctionWithCyTest":{"startLoc":{"col":72,"line":82},"endLoc":{"col":44,"line":84},"startBody":{"col":72,"line":82},"endBody":{"col":44,"line":84}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  id: \\"fileformats-storybookfiles\\", // story-code @skip\\n};\\n\\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\\n// prop to the default export, use object syntax throughout, build a template, etc.\\n\\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story function\\" />;\\n\\nStoryFunctionWithCyFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n// story-code @end @include-default\\nStoryFunctionWithCyFunction.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\".cy is the simplest format, expecting just a function which executes in cypress\\",\\n    },\\n  },\\n};\\n\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\nStoryFunctionWithCyObject.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n.cy also allows an object syntax where the text keys become the input for cypress \\\\`it\\\\`\'s\\nand the bodies execute within their own tests.\\n\\n\\\\`\\\\`\\\\`tsx\\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button {...args} label=\\"Story object\\" />;\\n\\nStoryFunctionWithCyObject.cy = {\\n  \\"should contain \'Story object\' label\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\"),\\n\\n  \\"should not be disabled by default\\": () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\"),\\n};\\n\\\\`\\\\`\\\\`\\n\\nbecomes\\n\\n\\\\`\\\\`\\\\`tsx\\ndescribe(\\"Story Function With Cy Object\\", () => {\\n  it(\\"should contain \'Story object\' label\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story object\\")\\n  );\\n\\n  it(\\"should not be disabled by default\\", () =>\\n    cy.dataCy(\\"button\\").should(\\"not.be.disabled\\")\\n  );\\n});\\n\\\\`\\\\`\\\\`\\n`,\\n    },\\n    source: { code: null },\\n  },\\n};\\n\\n// Could accept args, but label is required, so just showing a non-args version\\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\\n  args\\n) => <Button label=\\"Story test\\" {...args} />;\\n\\nStoryFunctionWithCyTest.cyTest = (Story) => {\\n  it(\\"should contain \'Story test\' label\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story test\\");\\n  });\\n\\n  it(\\"should accept a disabled prop\\", () => {\\n    cy.mount(<Story disabled />);\\n    cy.dataCy(\\"button\\").should(\\"be.disabled\\");\\n  });\\n\\n  it.skip(\\"should skip a test\\", () => {\\n    cy.mount(<Story />);\\n    cy.dataCy(\\"button\\").should(\\n      \\"contain\\",\\n      \\"This test would fail if not skipped\\"\\n    );\\n  });\\n};\\n// story-code @end\\nStoryFunctionWithCyTest.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n.cyTest offers the most control and is the most verbose.\\nIt allows executing test hooks like beforeEach, calling it.skip,\\nor passing new arguments to the story at each test, but requires\\nmanually calling cy.mount on the component that comes in as an argument.`,\\n    },\\n  },\\n};\\n\\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\\n  args: { label: \\"Story function\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\"),\\n  // story-code @skip-start\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: `\\n.cy is the most concise testing syntax and CSF object syntax is the most concise\\nstory format. Together, they can make for some truly small but powerful tests.`,\\n      },\\n    },\\n  },\\n  // story-code @skip-end\\n};\\n","locationsMap":{"story-function-with-cy-function":{"startLoc":{"col":76,"line":13},"endLoc":{"col":48,"line":15},"startBody":{"col":76,"line":13},"endBody":{"col":48,"line":15}},"story-function-with-cy-object":{"startLoc":{"col":74,"line":29},"endLoc":{"col":46,"line":31},"startBody":{"col":74,"line":29},"endBody":{"col":46,"line":31}},"story-function-with-cy-test":{"startLoc":{"col":72,"line":82},"endLoc":{"col":44,"line":84},"startBody":{"col":72,"line":82},"endBody":{"col":44,"line":84}}}},},\n  component: Button,\n  id: "fileformats-storybookfiles", // story-code @skip\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n// story-code @end @include-default\nStoryFunctionWithCyFunction.parameters = {\n  docs: {\n    description: {\n      story:\n        ".cy is the simplest format, expecting just a function which executes in cypress",\n    },\n  },\n};\n\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\nStoryFunctionWithCyObject.parameters = {\n  docs: {\n    description: {\n      story: `\n.cy also allows an object syntax where the text keys become the input for cypress \\`it\\`\'s\nand the bodies execute within their own tests.\n\n\\`\\`\\`tsx\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\\`\\`\\`\n\nbecomes\n\n\\`\\`\\`tsx\ndescribe("Story Function With Cy Object", () => {\n  it("should contain \'Story object\' label", () =>\n    cy.dataCy("button").should("contain", "Story object")\n  );\n\n  it("should not be disabled by default", () =>\n    cy.dataCy("button").should("not.be.disabled")\n  );\n});\n\\`\\`\\`\n`,\n    },\n    source: { code: null },\n  },\n};\n\n// Could accept args, but label is required, so just showing a non-args version\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button label="Story test" {...args} />;\n\nStoryFunctionWithCyTest.cyTest = (Story) => {\n  it("should contain \'Story test\' label", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should("contain", "Story test");\n  });\n\n  it("should accept a disabled prop", () => {\n    cy.mount(<Story disabled />);\n    cy.dataCy("button").should("be.disabled");\n  });\n\n  it.skip("should skip a test", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should(\n      "contain",\n      "This test would fail if not skipped"\n    );\n  });\n};\n// story-code @end\nStoryFunctionWithCyTest.parameters = {\n  docs: {\n    description: {\n      story: `\n.cyTest offers the most control and is the most verbose.\nIt allows executing test hooks like beforeEach, calling it.skip,\nor passing new arguments to the story at each test, but requires\nmanually calling cy.mount on the component that comes in as an argument.`,\n    },\n  },\n};\n\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\n  args: { label: "Story function" },\n  cy: () => cy.dataCy("button").should("contain", "Story function"),\n  // story-code @skip-start\n  parameters: {\n    docs: {\n      description: {\n        story: `\n.cy is the most concise testing syntax and CSF object syntax is the most concise\nstory format. Together, they can make for some truly small but powerful tests.`,\n      },\n    },\n  },\n  // story-code @skip-end\n};\n',locationsMap:{"story-function-with-cy-function":{startLoc:{col:76,line:21},endLoc:{col:48,line:23},startBody:{col:76,line:21},endBody:{col:48,line:23}},"story-function-with-cy-object":{startLoc:{col:74,line:37},endLoc:{col:46,line:39},startBody:{col:74,line:37},endBody:{col:46,line:39}},"story-function-with-cy-test":{startLoc:{col:72,line:90},endLoc:{col:44,line:92},startBody:{col:72,line:90},endBody:{col:44,line:92}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { Button } from "../Button";\n\nexport default {\n  component: Button,\n  id: "fileformats-storybookfiles", // story-code @skip\n};\n\n// These are more repetitive than necessary, real story scenarios would use a \'render\'\n// prop to the default export, use object syntax throughout, build a template, etc.\n\nexport const StoryFunctionWithCyFunction: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story function" />;\n\nStoryFunctionWithCyFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n// story-code @end @include-default\nStoryFunctionWithCyFunction.parameters = {\n  docs: {\n    description: {\n      story:\n        ".cy is the simplest format, expecting just a function which executes in cypress",\n    },\n  },\n};\n\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\nStoryFunctionWithCyObject.parameters = {\n  docs: {\n    description: {\n      story: `\n.cy also allows an object syntax where the text keys become the input for cypress \\`it\\`\'s\nand the bodies execute within their own tests.\n\n\\`\\`\\`tsx\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n\\`\\`\\`\n\nbecomes\n\n\\`\\`\\`tsx\ndescribe("Story Function With Cy Object", () => {\n  it("should contain \'Story object\' label", () =>\n    cy.dataCy("button").should("contain", "Story object")\n  );\n\n  it("should not be disabled by default", () =>\n    cy.dataCy("button").should("not.be.disabled")\n  );\n});\n\\`\\`\\`\n`,\n    },\n    source: { code: null },\n  },\n};\n\n// Could accept args, but label is required, so just showing a non-args version\nexport const StoryFunctionWithCyTest: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button label="Story test" {...args} />;\n\nStoryFunctionWithCyTest.cyTest = (Story) => {\n  it("should contain \'Story test\' label", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should("contain", "Story test");\n  });\n\n  it("should accept a disabled prop", () => {\n    cy.mount(<Story disabled />);\n    cy.dataCy("button").should("be.disabled");\n  });\n\n  it.skip("should skip a test", () => {\n    cy.mount(<Story />);\n    cy.dataCy("button").should(\n      "contain",\n      "This test would fail if not skipped"\n    );\n  });\n};\n// story-code @end\nStoryFunctionWithCyTest.parameters = {\n  docs: {\n    description: {\n      story: `\n.cyTest offers the most control and is the most verbose.\nIt allows executing test hooks like beforeEach, calling it.skip,\nor passing new arguments to the story at each test, but requires\nmanually calling cy.mount on the component that comes in as an argument.`,\n    },\n  },\n};\n\nexport const StoryObjectWithCyFunction: ComponentStoryObjCy<typeof Button> = {\n  args: { label: "Story function" },\n  cy: () => cy.dataCy("button").should("contain", "Story function"),\n  // story-code @skip-start\n  parameters: {\n    docs: {\n      description: {\n        story: `\n.cy is the most concise testing syntax and CSF object syntax is the most concise\nstory format. Together, they can make for some truly small but powerful tests.`,\n      },\n    },\n  },\n  // story-code @skip-end\n};\n',locationsMap:{"story-function-with-cy-function":{startLoc:{col:76,line:13},endLoc:{col:48,line:15},startBody:{col:76,line:13},endBody:{col:48,line:15}},"story-function-with-cy-object":{startLoc:{col:74,line:29},endLoc:{col:46,line:31},startBody:{col:74,line:29},endBody:{col:46,line:31}},"story-function-with-cy-test":{startLoc:{col:72,line:82},endLoc:{col:44,line:84},startBody:{col:72,line:82},endBody:{col:44,line:84}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,id:"fileformats-storybookfiles"};var StoryFunctionWithCyFunction=function StoryFunctionWithCyFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};StoryFunctionWithCyFunction.displayName="StoryFunctionWithCyFunction",StoryFunctionWithCyFunction.cy=function(){return cy.dataCy("button").should("contain","Story function")},StoryFunctionWithCyFunction.parameters={docs:{description:{story:".cy is the simplest format, expecting just a function which executes in cypress"}}};var StoryFunctionWithCyObject=function StoryFunctionWithCyObject(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story object"}))};StoryFunctionWithCyObject.displayName="StoryFunctionWithCyObject",StoryFunctionWithCyObject.cy={"should contain 'Story object' label":function shouldContainStoryObjectLabel(){return cy.dataCy("button").should("contain","Story object")},"should not be disabled by default":function shouldNotBeDisabledByDefault(){return cy.dataCy("button").should("not.be.disabled")}},StoryFunctionWithCyObject.parameters={docs:{description:{story:'\n.cy also allows an object syntax where the text keys become the input for cypress `it`\'s\nand the bodies execute within their own tests.\n\n```tsx\nexport const StoryFunctionWithCyObject: ComponentStoryCy<typeof Button> = (\n  args\n) => <Button {...args} label="Story object" />;\n\nStoryFunctionWithCyObject.cy = {\n  "should contain \'Story object\' label": () =>\n    cy.dataCy("button").should("contain", "Story object"),\n\n  "should not be disabled by default": () =>\n    cy.dataCy("button").should("not.be.disabled"),\n};\n```\n\nbecomes\n\n```tsx\ndescribe("Story Function With Cy Object", () => {\n  it("should contain \'Story object\' label", () =>\n    cy.dataCy("button").should("contain", "Story object")\n  );\n\n  it("should not be disabled by default", () =>\n    cy.dataCy("button").should("not.be.disabled")\n  );\n});\n```\n'},source:{code:null}}};var StoryFunctionWithCyTest=function StoryFunctionWithCyTest(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({label:"Story test"},args))};StoryFunctionWithCyTest.displayName="StoryFunctionWithCyTest",StoryFunctionWithCyTest.cyTest=function(Story){it("should contain 'Story test' label",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{})),cy.dataCy("button").should("contain","Story test")})),it("should accept a disabled prop",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{disabled:!0})),cy.dataCy("button").should("be.disabled")})),it.skip("should skip a test",(function(){cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{})),cy.dataCy("button").should("contain","This test would fail if not skipped")}))},StoryFunctionWithCyTest.parameters={docs:{description:{story:"\n.cyTest offers the most control and is the most verbose.\nIt allows executing test hooks like beforeEach, calling it.skip,\nor passing new arguments to the story at each test, but requires\nmanually calling cy.mount on the component that comes in as an argument."}}};var StoryObjectWithCyFunction={args:{label:"Story function"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Story function")})),parameters:{docs:{description:{story:"\n.cy is the most concise testing syntax and CSF object syntax is the most concise\nstory format. Together, they can make for some truly small but powerful tests."}}}},__namedExportsOrder=["StoryFunctionWithCyFunction","StoryFunctionWithCyObject","StoryFunctionWithCyTest","StoryObjectWithCyFunction"]},"./stories/MDX/CSFStoriesWithArbitraryMDX/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CSFStoriesWithArbitraryMDX:()=>CSFStoriesWithArbitraryMDX,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js");var esm=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)("h1",{id:"csf-stories-with-arbitrary-mdx"},"CSF Stories with Arbitrary MDX"),(0,esm.kt)("p",null,"You can import mdx files and use them as docs just fine while also having cypress expectations."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'import type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\nimport mdx from "./index.mdx";\nimport { Button } from "../../Button";\n\nexport default { component: Button };\n\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\n  args\n) => <Button {...args} />;\nCSFStoriesWithArbitraryMDX.args = {\n  label: "Documentation provided by arbitrary mdx file imports",\n};\n// don\'t show the component in the docs created by mdx\nCSFStoriesWithArbitraryMDX.parameters = {\n  docs: {\n    page: mdx,\n  },\n};\n')))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var _parameters,Button=__webpack_require__("./stories/Button/index.tsx"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const index_stories={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import type { ComponentStory } from \\"@storybook/react\\";\\nimport * as React from \\"react\\";\\n// @ts-ignore\\nimport mdx from \\"./index.mdx\\";\\nimport { Button } from \\"../../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\\n  args\\n) => <Button {...args} />;\\nCSFStoriesWithArbitraryMDX.args = {\\n  label: \\"Documentation provided by arbitrary mdx file imports\\",\\n};\\n// don\'t show the component in the docs created by mdx\\nCSFStoriesWithArbitraryMDX.parameters = {\\n  docs: {\\n    page: mdx,\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"CSFStoriesWithArbitraryMDX":{"startLoc":{"col":73,"line":9},"endLoc":{"col":25,"line":11},"startBody":{"col":73,"line":9},"endBody":{"col":25,"line":11}}};\n    \nimport type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\n// @ts-ignore\nimport mdx from "./index.mdx";\nimport { Button } from "../../Button";\n\nexport default {parameters: {"storySource":{"source":"import type { ComponentStory } from \\"@storybook/react\\";\\nimport * as React from \\"react\\";\\n// @ts-ignore\\nimport mdx from \\"./index.mdx\\";\\nimport { Button } from \\"../../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\\n  args\\n) => <Button {...args} />;\\nCSFStoriesWithArbitraryMDX.args = {\\n  label: \\"Documentation provided by arbitrary mdx file imports\\",\\n};\\n// don\'t show the component in the docs created by mdx\\nCSFStoriesWithArbitraryMDX.parameters = {\\n  docs: {\\n    page: mdx,\\n  },\\n};\\n","locationsMap":{"csf-stories-with-arbitrary-mdx":{"startLoc":{"col":73,"line":9},"endLoc":{"col":25,"line":11},"startBody":{"col":73,"line":9},"endBody":{"col":25,"line":11}}}},}, component: Button };\n\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\n  args\n) => <Button {...args} />;\nCSFStoriesWithArbitraryMDX.args = {\n  label: "Documentation provided by arbitrary mdx file imports",\n};\n// don\'t show the component in the docs created by mdx\nCSFStoriesWithArbitraryMDX.parameters = {\n  docs: {\n    page: mdx,\n  },\n};\n',locationsMap:{"csf-stories-with-arbitrary-mdx":{startLoc:{col:73,line:17},endLoc:{col:25,line:19},startBody:{col:73,line:17},endBody:{col:25,line:19}}}}},_parameters.storySource={source:'import type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\n// @ts-ignore\nimport mdx from "./index.mdx";\nimport { Button } from "../../Button";\n\nexport default { component: Button };\n\nexport const CSFStoriesWithArbitraryMDX: ComponentStory<typeof Button> = (\n  args\n) => <Button {...args} />;\nCSFStoriesWithArbitraryMDX.args = {\n  label: "Documentation provided by arbitrary mdx file imports",\n};\n// don\'t show the component in the docs created by mdx\nCSFStoriesWithArbitraryMDX.parameters = {\n  docs: {\n    page: mdx,\n  },\n};\n',locationsMap:{"csf-stories-with-arbitrary-mdx":{startLoc:{col:73,line:9},endLoc:{col:25,line:11},startBody:{col:73,line:9},endBody:{col:25,line:11}}}},_parameters),component:Button.z};var CSFStoriesWithArbitraryMDX=function CSFStoriesWithArbitraryMDX(args){return(0,jsx_runtime.jsx)(Button.z,Object.assign({},args))};CSFStoriesWithArbitraryMDX.displayName="CSFStoriesWithArbitraryMDX",CSFStoriesWithArbitraryMDX.args={label:"Documentation provided by arbitrary mdx file imports"},CSFStoriesWithArbitraryMDX.parameters={docs:{page:MDXContent}};var __namedExportsOrder=["CSFStoriesWithArbitraryMDX"]},"./stories/MDX/DocsInMDX/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DocsInMDX:()=>DocsInMDX,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={component:_Button__WEBPACK_IMPORTED_MODULE_2__.z,includeStories:[],cyIncludeStories:!0};var DocsInMDX=function DocsInMDX(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.z,Object.assign({},args))};DocsInMDX.displayName="DocsInMDX",DocsInMDX.args={label:"Documentation provided by mdx file while component is written in csf"},DocsInMDX.parameters={docs:{disable:!0}};var __namedExportsOrder=["DocsInMDX"]},"./stories/SkippingAndSelecting/FullySkipped.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Another:()=>Another,Skipped:()=>Skipped,__namedExportsOrder:()=>__namedExportsOrder,default:()=>FullySkipped_stories});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var Button=__webpack_require__("./stories/Button/index.tsx"),esm=(__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js")),dist_esm=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)("h1",{id:"fully-skipped"},"Fully Skipped"),(0,esm.kt)("p",null,"You can full skip test files via the cySkip property on the default export.\nIf you need to completely ignore them instead of marking as pending, see\n",(0,esm.kt)("a",{parentName:"p",href:"/docs/ignoring-via-cyincludestories--not-skipped-function"},"cyIncludeFiles")),(0,esm.kt)(dist_esm.Xz,{mdxType:"Canvas"},(0,esm.kt)(dist_esm.oG,{id:"skippingandselecting-fullyskipped--skipped",mdxType:"Story"})),(0,esm.kt)(dist_esm.Xz,{mdxType:"Canvas"},(0,esm.kt)(dist_esm.oG,{id:"skippingandselecting-fullyskipped--another",mdxType:"Story"})))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var _parameters,jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const FullySkipped_stories={component:Button.z,cySkip:!0,parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n// @ts-ignore\\nimport mdx from \\"./FullySkipped.mdx\\";\\n\\n\\nexport default {\\n  component: Button,\\n  cySkip: true,\\n  // story-code @skip-start\\n  parameters: {\\n    docs: {\\n      page: mdx,\\n    },\\n  },\\n  // story-code @skip-end\\n};\\n\\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkipped.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n// story-code @end @include-default\\n\\nexport const Another = {\\n  ...Skipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"Skipped":{"startLoc":{"col":56,"line":20},"endLoc":{"col":1,"line":22},"startBody":{"col":56,"line":20},"endBody":{"col":1,"line":22}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n// @ts-ignore\nimport mdx from "./FullySkipped.mdx";\n\n\nexport default {\n  component: Button,\n  cySkip: true,\n  // story-code @skip-start\n  parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n// @ts-ignore\\nimport mdx from \\"./FullySkipped.mdx\\";\\n\\n\\nexport default {\\n  component: Button,\\n  cySkip: true,\\n  // story-code @skip-start\\n  parameters: {\\n    docs: {\\n      page: mdx,\\n    },\\n  },\\n  // story-code @skip-end\\n};\\n\\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkipped.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n// story-code @end @include-default\\n\\nexport const Another = {\\n  ...Skipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n","locationsMap":{"skipped":{"startLoc":{"col":56,"line":20},"endLoc":{"col":1,"line":22},"startBody":{"col":56,"line":20},"endBody":{"col":1,"line":22}}}},\n    docs: {\n      page: mdx,\n    },\n  },\n  // story-code @skip-end\n};\n\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkipped.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n// story-code @end @include-default\n\nexport const Another = {\n  ...Skipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{skipped:{startLoc:{col:56,line:28},endLoc:{col:1,line:30},startBody:{col:56,line:28},endBody:{col:1,line:30}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n// @ts-ignore\nimport mdx from "./FullySkipped.mdx";\n\n\nexport default {\n  component: Button,\n  cySkip: true,\n  // story-code @skip-start\n  parameters: {\n    docs: {\n      page: mdx,\n    },\n  },\n  // story-code @skip-end\n};\n\nexport const Skipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkipped.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n// story-code @end @include-default\n\nexport const Another = {\n  ...Skipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{skipped:{startLoc:{col:56,line:20},endLoc:{col:1,line:22},startBody:{col:56,line:20},endBody:{col:1,line:22}}}},_parameters.docs={page:MDXContent},_parameters)};var Skipped=function Skipped(args){return(0,jsx_runtime.jsx)(Button.z,Object.assign({},args,{label:"Story function"}))};Skipped.displayName="Skipped",Skipped.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")};var Another=Object.assign({},Skipped,{args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")}))}),__namedExportsOrder=["Skipped","Another"]},"./stories/SkippingAndSelecting/IgnoringViaCyIncludeStories.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{NotSkippedFunction:()=>NotSkippedFunction,NotSkippedObject:()=>NotSkippedObject,SkippedFunction:()=>SkippedFunction,SkippedObject:()=>SkippedObject,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cyIncludeStories: [\\"NotSkippedFunction\\", \\"NotSkippedObject\\"],\\n  id: \\"ignoring-via-cyincludestories\\", // story-code @skip\\n};\\n\\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n// story-code @end @include-default\\nNotSkippedFunction.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n\\\\`cyIncludeStories\\\\` allows similar functionality to includeStories on the default export.\\nIt can be used to ensure that only some stories are tested while the others don\'t\\nregister with cypress at all, where [.cySkip](/docs/skippingandselecting-fullyskipped--skipped)\\nwill designate them as \'pending\'.`,\\n    },\\n  },\\n};\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n// story-code @end\\n\\nexport const NotSkippedObject = {\\n  ...SkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Another\\"),\\n};\\n\\nexport const SkippedObject = {\\n  ...SkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"NotSkippedFunction":{"startLoc":{"col":67,"line":11},"endLoc":{"col":1,"line":13},"startBody":{"col":67,"line":11},"endBody":{"col":1,"line":13}},"SkippedFunction":{"startLoc":{"col":64,"line":30},"endLoc":{"col":1,"line":32},"startBody":{"col":64,"line":30},"endBody":{"col":1,"line":32}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default {\\n  component: Button,\\n  cyIncludeStories: [\\"NotSkippedFunction\\", \\"NotSkippedObject\\"],\\n  id: \\"ignoring-via-cyincludestories\\", // story-code @skip\\n};\\n\\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n// story-code @end @include-default\\nNotSkippedFunction.parameters = {\\n  docs: {\\n    description: {\\n      story: `\\n\\\\`cyIncludeStories\\\\` allows similar functionality to includeStories on the default export.\\nIt can be used to ensure that only some stories are tested while the others don\'t\\nregister with cypress at all, where [.cySkip](/docs/skippingandselecting-fullyskipped--skipped)\\nwill designate them as \'pending\'.`,\\n    },\\n  },\\n};\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\n// story-code @end\\n\\nexport const NotSkippedObject = {\\n  ...SkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Another\\"),\\n};\\n\\nexport const SkippedObject = {\\n  ...SkippedFunction,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n};\\n","locationsMap":{"not-skipped-function":{"startLoc":{"col":67,"line":11},"endLoc":{"col":1,"line":13},"startBody":{"col":67,"line":11},"endBody":{"col":1,"line":13}},"skipped-function":{"startLoc":{"col":64,"line":30},"endLoc":{"col":1,"line":32},"startBody":{"col":64,"line":30},"endBody":{"col":1,"line":32}}}},},\n  component: Button,\n  cyIncludeStories: ["NotSkippedFunction", "NotSkippedObject"],\n  id: "ignoring-via-cyincludestories", // story-code @skip\n};\n\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);;\n\nNotSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n// story-code @end @include-default\nNotSkippedFunction.parameters = {\n  docs: {\n    description: {\n      story: `\n\\`cyIncludeStories\\` allows similar functionality to includeStories on the default export.\nIt can be used to ensure that only some stories are tested while the others don\'t\nregister with cypress at all, where [.cySkip](/docs/skippingandselecting-fullyskipped--skipped)\nwill designate them as \'pending\'.`,\n    },\n  },\n};\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n// story-code @end\n\nexport const NotSkippedObject = {\n  ...SkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Another"),\n};\n\nexport const SkippedObject = {\n  ...SkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{"not-skipped-function":{startLoc:{col:67,line:19},endLoc:{col:1,line:21},startBody:{col:67,line:19},endBody:{col:1,line:21}},"skipped-function":{startLoc:{col:64,line:38},endLoc:{col:1,line:40},startBody:{col:64,line:38},endBody:{col:1,line:40}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {\n  component: Button,\n  cyIncludeStories: ["NotSkippedFunction", "NotSkippedObject"],\n  id: "ignoring-via-cyincludestories", // story-code @skip\n};\n\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nNotSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n// story-code @end @include-default\nNotSkippedFunction.parameters = {\n  docs: {\n    description: {\n      story: `\n\\`cyIncludeStories\\` allows similar functionality to includeStories on the default export.\nIt can be used to ensure that only some stories are tested while the others don\'t\nregister with cypress at all, where [.cySkip](/docs/skippingandselecting-fullyskipped--skipped)\nwill designate them as \'pending\'.`,\n    },\n  },\n};\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n// story-code @end\n\nexport const NotSkippedObject = {\n  ...SkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Another"),\n};\n\nexport const SkippedObject = {\n  ...SkippedFunction,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n',locationsMap:{"not-skipped-function":{startLoc:{col:67,line:11},endLoc:{col:1,line:13},startBody:{col:67,line:11},endBody:{col:1,line:13}},"skipped-function":{startLoc:{col:64,line:30},endLoc:{col:1,line:32},startBody:{col:64,line:30},endBody:{col:1,line:32}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z,cyIncludeStories:["NotSkippedFunction","NotSkippedObject"],id:"ignoring-via-cyincludestories"};var NotSkippedFunction=function NotSkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};NotSkippedFunction.displayName="NotSkippedFunction",NotSkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Story function")},NotSkippedFunction.parameters={docs:{description:{story:"\n`cyIncludeStories` allows similar functionality to includeStories on the default export.\nIt can be used to ensure that only some stories are tested while the others don't\nregister with cypress at all, where [.cySkip](/docs/skippingandselecting-fullyskipped--skipped)\nwill designate them as 'pending'."}}};var SkippedFunction=function SkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};SkippedFunction.displayName="SkippedFunction",SkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")};var NotSkippedObject=Object.assign({},SkippedFunction,{args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Another")}))}),SkippedObject=Object.assign({},SkippedFunction,{args:{label:"Another"},cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")}))}),__namedExportsOrder=["NotSkippedFunction","SkippedFunction","NotSkippedObject","SkippedObject"]},"./stories/SkippingAndSelecting/SkippedStories.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{NotSkipped:()=>NotSkipped,Skipped:()=>Skipped,SkippedFunction:()=>SkippedFunction,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkipped.cy = () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n// story-code @end @include-default\\nNotSkipped.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\"You can skip individual stories via `.cySkip` property on the story itself.\\",\\n    },\\n  },\\n};\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\nSkippedFunction.cySkip = true;\\n// story-code @end\\n\\nexport const Skipped = {\\n  ...NotSkipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n  cySkip: true,\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"NotSkipped":{"startLoc":{"col":59,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":59,"line":7},"endBody":{"col":1,"line":9}},"SkippedFunction":{"startLoc":{"col":64,"line":22},"endLoc":{"col":1,"line":24},"startBody":{"col":64,"line":22},"endBody":{"col":1,"line":24}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy } from \\"src\\";\\nimport { Button } from \\"../Button\\";\\n\\nexport default { component: Button };\\n\\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nNotSkipped.cy = () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Story function\\");\\n// story-code @end @include-default\\nNotSkipped.parameters = {\\n  docs: {\\n    description: {\\n      story:\\n        \\"You can skip individual stories via `.cySkip` property on the story itself.\\",\\n    },\\n  },\\n};\\n\\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\\n  <Button {...args} label=\\"Story function\\" />\\n);\\n\\nSkippedFunction.cy = () =>\\n  cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\");\\nSkippedFunction.cySkip = true;\\n// story-code @end\\n\\nexport const Skipped = {\\n  ...NotSkipped,\\n  args: { label: \\"Another\\" },\\n  cy: () => cy.dataCy(\\"button\\").should(\\"contain\\", \\"Would fail if not skipped\\"),\\n  cySkip: true,\\n};\\n","locationsMap":{"not-skipped":{"startLoc":{"col":59,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":59,"line":7},"endBody":{"col":1,"line":9}},"skipped-function":{"startLoc":{"col":64,"line":22},"endLoc":{"col":1,"line":24},"startBody":{"col":64,"line":22},"endBody":{"col":1,"line":24}}}},}, component: Button };\n\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);;\n\nNotSkipped.cy = () => cy.dataCy("button").should("contain", "Story function");\n// story-code @end @include-default\nNotSkipped.parameters = {\n  docs: {\n    description: {\n      story:\n        "You can skip individual stories via `.cySkip` property on the story itself.",\n    },\n  },\n};\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\nSkippedFunction.cySkip = true;\n// story-code @end\n\nexport const Skipped = {\n  ...NotSkipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n  cySkip: true,\n};\n',locationsMap:{"not-skipped":{startLoc:{col:59,line:15},endLoc:{col:1,line:17},startBody:{col:59,line:15},endBody:{col:1,line:17}},"skipped-function":{startLoc:{col:64,line:30},endLoc:{col:1,line:32},startBody:{col:64,line:30},endBody:{col:1,line:32}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy } from "src";\nimport { Button } from "../Button";\n\nexport default { component: Button };\n\nexport const NotSkipped: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nNotSkipped.cy = () => cy.dataCy("button").should("contain", "Story function");\n// story-code @end @include-default\nNotSkipped.parameters = {\n  docs: {\n    description: {\n      story:\n        "You can skip individual stories via `.cySkip` property on the story itself.",\n    },\n  },\n};\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\nSkippedFunction.cySkip = true;\n// story-code @end\n\nexport const Skipped = {\n  ...NotSkipped,\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n  cySkip: true,\n};\n',locationsMap:{"not-skipped":{startLoc:{col:59,line:7},endLoc:{col:1,line:9},startBody:{col:59,line:7},endBody:{col:1,line:9}},"skipped-function":{startLoc:{col:64,line:22},endLoc:{col:1,line:24},startBody:{col:64,line:22},endBody:{col:1,line:24}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.z};var NotSkipped=function NotSkipped(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};NotSkipped.displayName="NotSkipped",NotSkipped.cy=function(){return cy.dataCy("button").should("contain","Story function")},NotSkipped.parameters={docs:{description:{story:"You can skip individual stories via `.cySkip` property on the story itself."}}};var SkippedFunction=function SkippedFunction(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.z,Object.assign({},args,{label:"Story function"}))};SkippedFunction.displayName="SkippedFunction",SkippedFunction.cy=function(){return cy.dataCy("button").should("contain","Would fail if not skipped")},SkippedFunction.cySkip=!0;var Skipped=Object.assign({},NotSkipped,{args:{label:"Another"},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){return cy.dataCy("button").should("contain","Would fail if not skipped")})),cySkip:!0}),__namedExportsOrder=["NotSkipped","SkippedFunction","Skipped"]},"./stories/StubActions/ExternalTests/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ArgtypeActionStub:()=>ArgtypeActionStub,ImplicitArgtypeActionStubViaRegex:()=>ImplicitArgtypeActionStubViaRegex,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../../Button\\";\\n\\nexport default {\\n  component: ClickCount,\\n  cySkip: true,\\n  // when using an external file, the argTypesRegex doesn\'t get brought in from main \'parameters\'\\n  // so you either have to add this, or manually provide the global preview to `composeStories`\\n  // parameters: {\\n  //   actions: {\\n  //     argTypesRegex: \\"^on[A-Z].*\\",\\n  //   },\\n  // },\\n};\\n\\nexport const ArgtypeActionStub: ComponentStoryCy<typeof ClickCount> = (\\n  args\\n) => <ClickCount {...args} />;\\nArgtypeActionStub.argTypes = {\\n  onClick: { action: \\"myClickStub\\" },\\n};\\n// story-code @end @include-start\\n\\nexport const ImplicitArgtypeActionStubViaRegex: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: { label: \\"Call via Regex\\" },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"ArgtypeActionStub":{"startLoc":{"col":70,"line":17},"endLoc":{"col":29,"line":19},"startBody":{"col":70,"line":17},"endBody":{"col":29,"line":19}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../../Button\\";\\n\\nexport default {\\n  component: ClickCount,\\n  cySkip: true,\\n  // when using an external file, the argTypesRegex doesn\'t get brought in from main \'parameters\'\\n  // so you either have to add this, or manually provide the global preview to `composeStories`\\n  // parameters: {\\n  //   actions: {\\n  //     argTypesRegex: \\"^on[A-Z].*\\",\\n  //   },\\n  // },\\n};\\n\\nexport const ArgtypeActionStub: ComponentStoryCy<typeof ClickCount> = (\\n  args\\n) => <ClickCount {...args} />;\\nArgtypeActionStub.argTypes = {\\n  onClick: { action: \\"myClickStub\\" },\\n};\\n// story-code @end @include-start\\n\\nexport const ImplicitArgtypeActionStubViaRegex: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: { label: \\"Call via Regex\\" },\\n};\\n","locationsMap":{"argtype-action-stub":{"startLoc":{"col":70,"line":17},"endLoc":{"col":29,"line":19},"startBody":{"col":70,"line":17},"endBody":{"col":29,"line":19}}}},},\n  component: ClickCount,\n  cySkip: true,\n  // when using an external file, the argTypesRegex doesn\'t get brought in from main \'parameters\'\n  // so you either have to add this, or manually provide the global preview to `composeStories`\n  // parameters: {\n  //   actions: {\n  //     argTypesRegex: "^on[A-Z].*",\n  //   },\n  // },\n};\n\nexport const ArgtypeActionStub: ComponentStoryCy<typeof ClickCount> = (\n  args\n) => <ClickCount {...args} />;\nArgtypeActionStub.argTypes = {\n  onClick: { action: "myClickStub" },\n};\n// story-code @end @include-start\n\nexport const ImplicitArgtypeActionStubViaRegex: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: { label: "Call via Regex" },\n};\n',locationsMap:{"argtype-action-stub":{startLoc:{col:70,line:25},endLoc:{col:29,line:27},startBody:{col:70,line:25},endBody:{col:29,line:27}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../../Button";\n\nexport default {\n  component: ClickCount,\n  cySkip: true,\n  // when using an external file, the argTypesRegex doesn\'t get brought in from main \'parameters\'\n  // so you either have to add this, or manually provide the global preview to `composeStories`\n  // parameters: {\n  //   actions: {\n  //     argTypesRegex: "^on[A-Z].*",\n  //   },\n  // },\n};\n\nexport const ArgtypeActionStub: ComponentStoryCy<typeof ClickCount> = (\n  args\n) => <ClickCount {...args} />;\nArgtypeActionStub.argTypes = {\n  onClick: { action: "myClickStub" },\n};\n// story-code @end @include-start\n\nexport const ImplicitArgtypeActionStubViaRegex: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: { label: "Call via Regex" },\n};\n',locationsMap:{"argtype-action-stub":{startLoc:{col:70,line:17},endLoc:{col:29,line:19},startBody:{col:70,line:17},endBody:{col:29,line:19}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_2__.t,cySkip:!0};var ArgtypeActionStub=function ArgtypeActionStub(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_2__.t,Object.assign({},args))};ArgtypeActionStub.displayName="ArgtypeActionStub",ArgtypeActionStub.argTypes={onClick:{action:"myClickStub"}};var ImplicitArgtypeActionStubViaRegex={args:{label:"Call via Regex"}},__namedExportsOrder=["ArgtypeActionStub","ImplicitArgtypeActionStubViaRegex"]},"./stories/StubActions/WithDefaultExportSettings.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{SpyOnArgsWhichAreAlreadyProvided:()=>SpyOnArgsWhichAreAlreadyProvided,SpyOnArgsWhichAreProvidedInDefaultExport:()=>SpyOnArgsWhichAreProvidedInDefaultExport,SpyOnProvided:()=>SpyOnProvided,StubActionsDefinedOnDefaultExport:()=>StubActionsDefinedOnDefaultExport,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js"),hasCypress=Boolean(__webpack_require__.g.Cypress),onClickSpy=hasCypress?Cypress.sinon.spy((function(){return 1})):function(){return 1},onClickSpy2=hasCypress?Cypress.sinon.spy((function(){return 1})):function(){return 1};const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import type Sinon from \\"cypress/types/sinon\\";\\nimport React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../Button\\";\\n\\n// With both of these, you\'d probably just be passing in normal functions,\\n// but here we\'re spying for the sake of meta-test assertions.\\nconst hasCypress = Boolean((global as any).Cypress);\\nconst onClickSpy = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\\nconst onClickSpy2 = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\\n\\nexport default {\\n  component: ClickCount,\\n  argTypes: {\\n    onClick: { action: \\"myClickStub\\" },\\n  },\\n  args: {\\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\\n    onClick2: onClickSpy2,\\n  },\\n};\\n\\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n    cy.dataCy(\\"button\\").click();\\n\\n    // name on actions is `onClick`\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // but the action string also functions as an alias\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    // and if it would have come from argtypes regex as well, then\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  },\\n};\\n// story-code @include-start\\n\\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: {\\n    onClick: onClickSpy,\\n  },\\n  cy: () => {\\n    (onClickSpy as Sinon.SinonSpy).resetHistory();\\n    cy.dataCy(\\"button\\")\\n      .click()\\n      // So the spy itself is already called (you\'d probably just provide a normal function)\\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n    // And then the important thing: actions object wraps that provided function in a spy\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // still aliased as the argtype name as well and not from regex\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  },\\n};\\n\\nexport const SpyOnProvided: ComponentStoryCy<typeof ClickCount> = (args) => (\\n  <ClickCount {...args} />\\n);\\nSpyOnProvided.args = {\\n  onClick: onClickSpy,\\n};\\nSpyOnProvided.cy = () => {\\n  (onClickSpy as Sinon.SinonSpy).resetHistory();\\n  cy.dataCy(\\"button\\")\\n    .click()\\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n  cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n};\\n// story-code @end SpyOnProvided\\n\\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    (onClickSpy2 as Sinon.SinonSpy).resetHistory();\\n    cy.dataCy(\\"button-2\\")\\n      .click()\\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\\n    cy.get(\\"@actions\\").its(\\"onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex generated stub\\n    cy.get(\\"@argTypesRegex.onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"SpyOnProvided":{"startLoc":{"col":66,"line":62},"endLoc":{"col":1,"line":64},"startBody":{"col":66,"line":62},"endBody":{"col":1,"line":64}}};\n    \nimport type Sinon from "cypress/types/sinon";\nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../Button";\n\n// With both of these, you\'d probably just be passing in normal functions,\n// but here we\'re spying for the sake of meta-test assertions.\nconst hasCypress = Boolean((global as any).Cypress);\nconst onClickSpy = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\nconst onClickSpy2 = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\n\nexport default {parameters: {"storySource":{"source":"import type Sinon from \\"cypress/types/sinon\\";\\nimport React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../Button\\";\\n\\n// With both of these, you\'d probably just be passing in normal functions,\\n// but here we\'re spying for the sake of meta-test assertions.\\nconst hasCypress = Boolean((global as any).Cypress);\\nconst onClickSpy = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\\nconst onClickSpy2 = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\\n\\nexport default {\\n  component: ClickCount,\\n  argTypes: {\\n    onClick: { action: \\"myClickStub\\" },\\n  },\\n  args: {\\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\\n    onClick2: onClickSpy2,\\n  },\\n};\\n\\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n    cy.dataCy(\\"button\\").click();\\n\\n    // name on actions is `onClick`\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // but the action string also functions as an alias\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    // and if it would have come from argtypes regex as well, then\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n\\n    cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  },\\n};\\n// story-code @include-start\\n\\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: {\\n    onClick: onClickSpy,\\n  },\\n  cy: () => {\\n    (onClickSpy as Sinon.SinonSpy).resetHistory();\\n    cy.dataCy(\\"button\\")\\n      .click()\\n      // So the spy itself is already called (you\'d probably just provide a normal function)\\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n    // And then the important thing: actions object wraps that provided function in a spy\\n    cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n    // still aliased as the argtype name as well and not from regex\\n    cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n    cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  },\\n};\\n\\nexport const SpyOnProvided: ComponentStoryCy<typeof ClickCount> = (args) => (\\n  <ClickCount {...args} />\\n);\\nSpyOnProvided.args = {\\n  onClick: onClickSpy,\\n};\\nSpyOnProvided.cy = () => {\\n  (onClickSpy as Sinon.SinonSpy).resetHistory();\\n  cy.dataCy(\\"button\\")\\n    .click()\\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\\n  cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.get(\\"@myClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n};\\n// story-code @end SpyOnProvided\\n\\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cy: () => {\\n    (onClickSpy2 as Sinon.SinonSpy).resetHistory();\\n    cy.dataCy(\\"button-2\\")\\n      .click()\\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\\n    cy.get(\\"@actions\\").its(\\"onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex generated stub\\n    cy.get(\\"@argTypesRegex.onClick2\\").should(\\"be.calledOnceWith\\", 0);\\n  },\\n};\\n","locationsMap":{"spy-on-provided":{"startLoc":{"col":66,"line":62},"endLoc":{"col":1,"line":64},"startBody":{"col":66,"line":62},"endBody":{"col":1,"line":64}}}},},\n  component: ClickCount,\n  argTypes: {\n    onClick: { action: "myClickStub" },\n  },\n  args: {\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\n    onClick2: onClickSpy2,\n  },\n};\n\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is `onClick`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // and if it would have come from argtypes regex as well, then\n    cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n\n    cy.dataCy("count").should("contain", 1);\n  },\n};\n// story-code @include-start\n\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: {\n    onClick: onClickSpy,\n  },\n  cy: () => {\n    (onClickSpy as Sinon.SinonSpy).resetHistory();\n    cy.dataCy("button")\n      .click()\n      // So the spy itself is already called (you\'d probably just provide a normal function)\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n    // And then the important thing: actions object wraps that provided function in a spy\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // still aliased as the argtype name as well and not from regex\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n  },\n};\n\nexport const SpyOnProvided: ComponentStoryCy<typeof ClickCount> = (args) => (\n  <ClickCount {...args} />\n);\nSpyOnProvided.args = {\n  onClick: onClickSpy,\n};\nSpyOnProvided.cy = () => {\n  (onClickSpy as Sinon.SinonSpy).resetHistory();\n  cy.dataCy("button")\n    .click()\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n  cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n  cy.get("@myClickStub").should("be.calledOnceWith", 0);\n  cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n};\n// story-code @end SpyOnProvided\n\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    (onClickSpy2 as Sinon.SinonSpy).resetHistory();\n    cy.dataCy("button-2")\n      .click()\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\n    cy.get("@actions").its("onClick2").should("be.calledOnceWith", 0);\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex generated stub\n    cy.get("@argTypesRegex.onClick2").should("be.calledOnceWith", 0);\n  },\n};\n',locationsMap:{"spy-on-provided":{startLoc:{col:66,line:70},endLoc:{col:1,line:72},startBody:{col:66,line:70},endBody:{col:1,line:72}}}}},_parameters.storySource={source:'import type Sinon from "cypress/types/sinon";\nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../Button";\n\n// With both of these, you\'d probably just be passing in normal functions,\n// but here we\'re spying for the sake of meta-test assertions.\nconst hasCypress = Boolean((global as any).Cypress);\nconst onClickSpy = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\nconst onClickSpy2 = hasCypress ? Cypress.sinon.spy(() => 1) : () => 1;\n\nexport default {\n  component: ClickCount,\n  argTypes: {\n    onClick: { action: "myClickStub" },\n  },\n  args: {\n    // not tested until SpyOnArgsWhichAreProvidedInDefaultExport\n    onClick2: onClickSpy2,\n  },\n};\n\nexport const StubActionsDefinedOnDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    cy.dataCy("count").should("contain", 0);\n    cy.dataCy("button").click();\n\n    // name on actions is `onClick`\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // but the action string also functions as an alias\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    // and if it would have come from argtypes regex as well, then\n    cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n\n    cy.dataCy("count").should("contain", 1);\n  },\n};\n// story-code @include-start\n\nexport const SpyOnArgsWhichAreAlreadyProvided: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: {\n    onClick: onClickSpy,\n  },\n  cy: () => {\n    (onClickSpy as Sinon.SinonSpy).resetHistory();\n    cy.dataCy("button")\n      .click()\n      // So the spy itself is already called (you\'d probably just provide a normal function)\n      .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n    // And then the important thing: actions object wraps that provided function in a spy\n    cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n    // still aliased as the argtype name as well and not from regex\n    cy.get("@myClickStub").should("be.calledOnceWith", 0);\n    cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n  },\n};\n\nexport const SpyOnProvided: ComponentStoryCy<typeof ClickCount> = (args) => (\n  <ClickCount {...args} />\n);\nSpyOnProvided.args = {\n  onClick: onClickSpy,\n};\nSpyOnProvided.cy = () => {\n  (onClickSpy as Sinon.SinonSpy).resetHistory();\n  cy.dataCy("button")\n    .click()\n    .then(() => expect(onClickSpy).to.be.calledOnceWith(0));\n  cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n  cy.get("@myClickStub").should("be.calledOnceWith", 0);\n  cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n};\n// story-code @end SpyOnProvided\n\nexport const SpyOnArgsWhichAreProvidedInDefaultExport: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cy: () => {\n    (onClickSpy2 as Sinon.SinonSpy).resetHistory();\n    cy.dataCy("button-2")\n      .click()\n      .then(() => expect(onClickSpy2).to.be.calledOnceWith(0));\n    cy.get("@actions").its("onClick2").should("be.calledOnceWith", 0);\n    // No argTypes provided for onClick2, so this goes to the argTypesRegex generated stub\n    cy.get("@argTypesRegex.onClick2").should("be.calledOnceWith", 0);\n  },\n};\n',locationsMap:{"spy-on-provided":{startLoc:{col:66,line:62},endLoc:{col:1,line:64},startBody:{col:66,line:62},endBody:{col:1,line:64}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.t,argTypes:{onClick:{action:"myClickStub"}},args:{onClick2:onClickSpy2}};var StubActionsDefinedOnDefaultExport={cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){cy.dataCy("count").should("contain",0),cy.dataCy("button").click(),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@myClickStub").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("be.calledOnceWith",0),cy.dataCy("count").should("contain",1)}))},SpyOnArgsWhichAreAlreadyProvided={args:{onClick:onClickSpy},cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){onClickSpy.resetHistory(),cy.dataCy("button").click().then((function(){return expect(onClickSpy).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@myClickStub").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("be.calledOnceWith",0)}))},SpyOnProvided=function SpyOnProvided(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.t,Object.assign({},args))};SpyOnProvided.displayName="SpyOnProvided",SpyOnProvided.args={onClick:onClickSpy},SpyOnProvided.cy=function(){onClickSpy.resetHistory(),cy.dataCy("button").click().then((function(){return expect(onClickSpy).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@myClickStub").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("be.calledOnceWith",0)};var SpyOnArgsWhichAreProvidedInDefaultExport={cy:function(_cy3){function cy(){return _cy3.apply(this,arguments)}return cy.toString=function(){return _cy3.toString()},cy}((function(){onClickSpy2.resetHistory(),cy.dataCy("button-2").click().then((function(){return expect(onClickSpy2).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick2").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick2").should("be.calledOnceWith",0)}))},__namedExportsOrder=["StubActionsDefinedOnDefaultExport","SpyOnArgsWhichAreAlreadyProvided","SpyOnProvided","SpyOnArgsWhichAreProvidedInDefaultExport"]},"./stories/StubActions/WithStorySettings.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CheckOtherAliasesAndAccessOptions:()=>CheckOtherAliasesAndAccessOptions,ImplicitArgtypeViaRegex:()=>ImplicitArgtypeViaRegex,MockIfProvidedViaArgTypesRegardlessOfDocgen:()=>MockIfProvidedViaArgTypesRegardlessOfDocgen,MockIfProvidedViaArgsRegardlessOfDocgen:()=>MockIfProvidedViaArgsRegardlessOfDocgen,StubActions:()=>StubActions,WithExplicitStubAsPropToStory:()=>WithExplicitStubAsPropToStory,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.regexp.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.date.to-string.js"),__webpack_require__("./node_modules/react/index.js");var _parameters,_Button__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./stories/Button/index.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/react/jsx-runtime.js");const __WEBPACK_DEFAULT_EXPORT__={parameters:(_parameters={storySource:{source:'\n    \n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = "import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../Button\\";\\n\\nexport default { component: ClickCount };\\n\\nexport const StubActions: ComponentStoryCy<typeof ClickCount> = (args) => (\\n  <ClickCount {...args} />\\n);\\nStubActions.argTypes = {\\n  onClick: { action: \\"onClickStub\\" },\\n  onClick2: { action: \\"onClick2Stub\\" },\\n};\\nStubActions.cyOnly = true;\\nStubActions.cy = () => {\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n  cy.dataCy(\\"button\\").click();\\n  cy.get(\\"@onClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  cy.dataCy(\\"button\\").click();\\n  cy.get(\\"@onClickStub\\").should(\\"have.callCount\\", 2).and(\\"be.calledWith\\", 1);\\n  cy.dataCy(\\"button-2\\").click().click().click();\\n  cy.get(\\"@onClick2Stub\\").should(\\"have.callCount\\", 3);\\n};\\n// story-code @end\\n\\nexport const CheckOtherAliasesAndAccessOptions: ComponentStoryCy<\\n  typeof ClickCount\\n> = (args) => <ClickCount {...args} />;\\nCheckOtherAliasesAndAccessOptions.argTypes = {\\n  onClick: { action: \\"onClickStub\\" },\\n};\\nCheckOtherAliasesAndAccessOptions.cy = function () {\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n  cy.dataCy(\\"button\\").click();\\n\\n  // name on actions is `onClick`\\n  cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  // but the action string also functions as an alias\\n  cy.get(\\"@onClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n  // and it\'s also aliased as argTypesRegex.onClick since the argtypes would have applied\\n  cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledWith\\", 0);\\n\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n\\n  cy.dataCy(\\"button\\")\\n    .click()\\n    .then(() => {\\n      // just proving that `this` access works\\n      const self = this as any;\\n      expect(self.actions.onClick).to.have.callCount(2).and.be.calledWith(1);\\n      expect(self.onClickStub).to.have.callCount(2).and.be.calledWith(1);\\n      expect(self[\\"argTypesRegex.onClick\\"])\\n        .to.have.callCount(2)\\n        .and.be.calledWith(1);\\n      cy.dataCy(\\"count\\").should(\\"contain\\", 2);\\n    });\\n};\\n// story-code @end\\n\\nexport const ImplicitArgtypeViaRegex: ComponentStoryObjCy<typeof ClickCount> = {\\n  cy: {\\n    \\"should stub via argtype regex when no other reasons for stubbing exist\\":\\n      function () {\\n        cy.dataCy(\\"button\\")\\n          .click()\\n          .then(() => {\\n            // confirming that `this` access also works\\n            // @ts-ignore\\n            expect(this.actions.onClick).to.be.calledOnceWith(0);\\n          });\\n        cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n        cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n      },\\n  },\\n};\\n\\nexport const WithExplicitStubAsPropToStory: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cyTest: (Story) => {\\n    beforeEach(() => {\\n      cy.spy(() => 1).as(\\"beforeEachSpy\\");\\n    });\\n\\n    it(\\"should call the spy and not the argTypesRegex stub\\", function () {\\n      // could be alias syntax, but showing variant\\n      cy.mount(<Story onClick={this.beforeEachSpy} />);\\n      cy.dataCy(\\"button\\")\\n        .click()\\n        .then(() => {\\n          expect(this.actions.onClick).to.have.callCount(0);\\n          expect(this[\\"argTypesRegex.onClick\\"]).to.have.callCount(0);\\n          expect(this.beforeEachSpy).to.be.calledOnceWith(0);\\n        });\\n    });\\n  },\\n};\\n\\nexport const MockIfProvidedViaArgsRegardlessOfDocgen: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: {\\n    // @ts-ignore\\n    onSomethingElse: () => 1,\\n  },\\n  cy: () => {\\n    // these won\'t be called, but asserting not called proves they were stubbed and are stubs/spies\\n    cy.get(\\"@actions\\").its(\\"onSomethingElse\\").should(\\"not.be.called\\");\\n    cy.get(\\"@argTypesRegex.onSomethingElse\\").should(\\"not.be.called\\");\\n  },\\n  // story-code @skip-start\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: `\\nProves that you can mock without presence of docgen plugin as long as it comes in as an arg.\\nProviding a mock not acceptable by typescript was easier than building a separate pipeline\\nwithout docgen`,\\n      },\\n    },\\n  },\\n  // story-code @skip-end\\n};\\n\\nexport const MockIfProvidedViaArgTypesRegardlessOfDocgen: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  argTypes: {\\n    // @ts-ignore\\n    onSomethingElse: { action: \\"onSomethingElseAlias\\" },\\n  },\\n  cy: () => {\\n    cy.get(\\"@actions\\").its(\\"onSomethingElse\\").should(\\"not.be.called\\");\\n    cy.get(\\"@onSomethingElseAlias\\").should(\\"not.be.called\\");\\n  },\\n};\\n";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {"StubActions":{"startLoc":{"col":64,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":64,"line":7},"endBody":{"col":1,"line":9}},"CheckOtherAliasesAndAccessOptions":{"startLoc":{"col":4,"line":29},"endLoc":{"col":38,"line":29},"startBody":{"col":4,"line":29},"endBody":{"col":38,"line":29}}};\n    \nimport React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../Button";\n\nexport default {parameters: {"storySource":{"source":"import React from \\"react\\";\\nimport type { ComponentStoryCy, ComponentStoryObjCy } from \\"src\\";\\nimport { ClickCount } from \\"../Button\\";\\n\\nexport default { component: ClickCount };\\n\\nexport const StubActions: ComponentStoryCy<typeof ClickCount> = (args) => (\\n  <ClickCount {...args} />\\n);\\nStubActions.argTypes = {\\n  onClick: { action: \\"onClickStub\\" },\\n  onClick2: { action: \\"onClick2Stub\\" },\\n};\\nStubActions.cyOnly = true;\\nStubActions.cy = () => {\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n  cy.dataCy(\\"button\\").click();\\n  cy.get(\\"@onClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n  cy.dataCy(\\"button\\").click();\\n  cy.get(\\"@onClickStub\\").should(\\"have.callCount\\", 2).and(\\"be.calledWith\\", 1);\\n  cy.dataCy(\\"button-2\\").click().click().click();\\n  cy.get(\\"@onClick2Stub\\").should(\\"have.callCount\\", 3);\\n};\\n// story-code @end\\n\\nexport const CheckOtherAliasesAndAccessOptions: ComponentStoryCy<\\n  typeof ClickCount\\n> = (args) => <ClickCount {...args} />;\\nCheckOtherAliasesAndAccessOptions.argTypes = {\\n  onClick: { action: \\"onClickStub\\" },\\n};\\nCheckOtherAliasesAndAccessOptions.cy = function () {\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 0);\\n  cy.dataCy(\\"button\\").click();\\n\\n  // name on actions is `onClick`\\n  cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n  // but the action string also functions as an alias\\n  cy.get(\\"@onClickStub\\").should(\\"be.calledOnceWith\\", 0);\\n  // and it\'s also aliased as argTypesRegex.onClick since the argtypes would have applied\\n  cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledWith\\", 0);\\n\\n  cy.dataCy(\\"count\\").should(\\"contain\\", 1);\\n\\n  cy.dataCy(\\"button\\")\\n    .click()\\n    .then(() => {\\n      // just proving that `this` access works\\n      const self = this as any;\\n      expect(self.actions.onClick).to.have.callCount(2).and.be.calledWith(1);\\n      expect(self.onClickStub).to.have.callCount(2).and.be.calledWith(1);\\n      expect(self[\\"argTypesRegex.onClick\\"])\\n        .to.have.callCount(2)\\n        .and.be.calledWith(1);\\n      cy.dataCy(\\"count\\").should(\\"contain\\", 2);\\n    });\\n};\\n// story-code @end\\n\\nexport const ImplicitArgtypeViaRegex: ComponentStoryObjCy<typeof ClickCount> = {\\n  cy: {\\n    \\"should stub via argtype regex when no other reasons for stubbing exist\\":\\n      function () {\\n        cy.dataCy(\\"button\\")\\n          .click()\\n          .then(() => {\\n            // confirming that `this` access also works\\n            // @ts-ignore\\n            expect(this.actions.onClick).to.be.calledOnceWith(0);\\n          });\\n        cy.get(\\"@actions\\").its(\\"onClick\\").should(\\"be.calledOnceWith\\", 0);\\n        cy.get(\\"@argTypesRegex.onClick\\").should(\\"be.calledOnceWith\\", 0);\\n      },\\n  },\\n};\\n\\nexport const WithExplicitStubAsPropToStory: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  cyTest: (Story) => {\\n    beforeEach(() => {\\n      cy.spy(() => 1).as(\\"beforeEachSpy\\");\\n    });\\n\\n    it(\\"should call the spy and not the argTypesRegex stub\\", function () {\\n      // could be alias syntax, but showing variant\\n      cy.mount(<Story onClick={this.beforeEachSpy} />);\\n      cy.dataCy(\\"button\\")\\n        .click()\\n        .then(() => {\\n          expect(this.actions.onClick).to.have.callCount(0);\\n          expect(this[\\"argTypesRegex.onClick\\"]).to.have.callCount(0);\\n          expect(this.beforeEachSpy).to.be.calledOnceWith(0);\\n        });\\n    });\\n  },\\n};\\n\\nexport const MockIfProvidedViaArgsRegardlessOfDocgen: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  args: {\\n    // @ts-ignore\\n    onSomethingElse: () => 1,\\n  },\\n  cy: () => {\\n    // these won\'t be called, but asserting not called proves they were stubbed and are stubs/spies\\n    cy.get(\\"@actions\\").its(\\"onSomethingElse\\").should(\\"not.be.called\\");\\n    cy.get(\\"@argTypesRegex.onSomethingElse\\").should(\\"not.be.called\\");\\n  },\\n  // story-code @skip-start\\n  parameters: {\\n    docs: {\\n      description: {\\n        story: `\\nProves that you can mock without presence of docgen plugin as long as it comes in as an arg.\\nProviding a mock not acceptable by typescript was easier than building a separate pipeline\\nwithout docgen`,\\n      },\\n    },\\n  },\\n  // story-code @skip-end\\n};\\n\\nexport const MockIfProvidedViaArgTypesRegardlessOfDocgen: ComponentStoryObjCy<\\n  typeof ClickCount\\n> = {\\n  argTypes: {\\n    // @ts-ignore\\n    onSomethingElse: { action: \\"onSomethingElseAlias\\" },\\n  },\\n  cy: () => {\\n    cy.get(\\"@actions\\").its(\\"onSomethingElse\\").should(\\"not.be.called\\");\\n    cy.get(\\"@onSomethingElseAlias\\").should(\\"not.be.called\\");\\n  },\\n};\\n","locationsMap":{"stub-actions":{"startLoc":{"col":64,"line":7},"endLoc":{"col":1,"line":9},"startBody":{"col":64,"line":7},"endBody":{"col":1,"line":9}},"check-other-aliases-and-access-options":{"startLoc":{"col":4,"line":29},"endLoc":{"col":38,"line":29},"startBody":{"col":4,"line":29},"endBody":{"col":38,"line":29}}}},}, component: ClickCount };\n\nexport const StubActions: ComponentStoryCy<typeof ClickCount> = (args) => (\n  <ClickCount {...args} />\n);;\nStubActions.argTypes = {\n  onClick: { action: "onClickStub" },\n  onClick2: { action: "onClick2Stub" },\n};\nStubActions.cyOnly = true;\nStubActions.cy = () => {\n  cy.dataCy("count").should("contain", 0);\n  cy.dataCy("button").click();\n  cy.get("@onClickStub").should("be.calledOnceWith", 0);\n  cy.dataCy("count").should("contain", 1);\n  cy.dataCy("button").click();\n  cy.get("@onClickStub").should("have.callCount", 2).and("be.calledWith", 1);\n  cy.dataCy("button-2").click().click().click();\n  cy.get("@onClick2Stub").should("have.callCount", 3);\n};\n// story-code @end\n\nexport const CheckOtherAliasesAndAccessOptions: ComponentStoryCy<\n  typeof ClickCount\n> = (args) => <ClickCount {...args} />;\nCheckOtherAliasesAndAccessOptions.argTypes = {\n  onClick: { action: "onClickStub" },\n};\nCheckOtherAliasesAndAccessOptions.cy = function () {\n  cy.dataCy("count").should("contain", 0);\n  cy.dataCy("button").click();\n\n  // name on actions is `onClick`\n  cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n  // but the action string also functions as an alias\n  cy.get("@onClickStub").should("be.calledOnceWith", 0);\n  // and it\'s also aliased as argTypesRegex.onClick since the argtypes would have applied\n  cy.get("@argTypesRegex.onClick").should("be.calledWith", 0);\n\n  cy.dataCy("count").should("contain", 1);\n\n  cy.dataCy("button")\n    .click()\n    .then(() => {\n      // just proving that `this` access works\n      const self = this as any;\n      expect(self.actions.onClick).to.have.callCount(2).and.be.calledWith(1);\n      expect(self.onClickStub).to.have.callCount(2).and.be.calledWith(1);\n      expect(self["argTypesRegex.onClick"])\n        .to.have.callCount(2)\n        .and.be.calledWith(1);\n      cy.dataCy("count").should("contain", 2);\n    });\n};\n// story-code @end\n\nexport const ImplicitArgtypeViaRegex: ComponentStoryObjCy<typeof ClickCount> = {\n  cy: {\n    "should stub via argtype regex when no other reasons for stubbing exist":\n      function () {\n        cy.dataCy("button")\n          .click()\n          .then(() => {\n            // confirming that `this` access also works\n            // @ts-ignore\n            expect(this.actions.onClick).to.be.calledOnceWith(0);\n          });\n        cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n        cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n      },\n  },\n};\n\nexport const WithExplicitStubAsPropToStory: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cyTest: (Story) => {\n    beforeEach(() => {\n      cy.spy(() => 1).as("beforeEachSpy");\n    });\n\n    it("should call the spy and not the argTypesRegex stub", function () {\n      // could be alias syntax, but showing variant\n      cy.mount(<Story onClick={this.beforeEachSpy} />);\n      cy.dataCy("button")\n        .click()\n        .then(() => {\n          expect(this.actions.onClick).to.have.callCount(0);\n          expect(this["argTypesRegex.onClick"]).to.have.callCount(0);\n          expect(this.beforeEachSpy).to.be.calledOnceWith(0);\n        });\n    });\n  },\n};\n\nexport const MockIfProvidedViaArgsRegardlessOfDocgen: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: {\n    // @ts-ignore\n    onSomethingElse: () => 1,\n  },\n  cy: () => {\n    // these won\'t be called, but asserting not called proves they were stubbed and are stubs/spies\n    cy.get("@actions").its("onSomethingElse").should("not.be.called");\n    cy.get("@argTypesRegex.onSomethingElse").should("not.be.called");\n  },\n  // story-code @skip-start\n  parameters: {\n    docs: {\n      description: {\n        story: `\nProves that you can mock without presence of docgen plugin as long as it comes in as an arg.\nProviding a mock not acceptable by typescript was easier than building a separate pipeline\nwithout docgen`,\n      },\n    },\n  },\n  // story-code @skip-end\n};\n\nexport const MockIfProvidedViaArgTypesRegardlessOfDocgen: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  argTypes: {\n    // @ts-ignore\n    onSomethingElse: { action: "onSomethingElseAlias" },\n  },\n  cy: () => {\n    cy.get("@actions").its("onSomethingElse").should("not.be.called");\n    cy.get("@onSomethingElseAlias").should("not.be.called");\n  },\n};\n',locationsMap:{"stub-actions":{startLoc:{col:64,line:15},endLoc:{col:1,line:17},startBody:{col:64,line:15},endBody:{col:1,line:17}},"check-other-aliases-and-access-options":{startLoc:{col:4,line:37},endLoc:{col:38,line:37},startBody:{col:4,line:37},endBody:{col:38,line:37}}}}},_parameters.storySource={source:'import React from "react";\nimport type { ComponentStoryCy, ComponentStoryObjCy } from "src";\nimport { ClickCount } from "../Button";\n\nexport default { component: ClickCount };\n\nexport const StubActions: ComponentStoryCy<typeof ClickCount> = (args) => (\n  <ClickCount {...args} />\n);\nStubActions.argTypes = {\n  onClick: { action: "onClickStub" },\n  onClick2: { action: "onClick2Stub" },\n};\nStubActions.cyOnly = true;\nStubActions.cy = () => {\n  cy.dataCy("count").should("contain", 0);\n  cy.dataCy("button").click();\n  cy.get("@onClickStub").should("be.calledOnceWith", 0);\n  cy.dataCy("count").should("contain", 1);\n  cy.dataCy("button").click();\n  cy.get("@onClickStub").should("have.callCount", 2).and("be.calledWith", 1);\n  cy.dataCy("button-2").click().click().click();\n  cy.get("@onClick2Stub").should("have.callCount", 3);\n};\n// story-code @end\n\nexport const CheckOtherAliasesAndAccessOptions: ComponentStoryCy<\n  typeof ClickCount\n> = (args) => <ClickCount {...args} />;\nCheckOtherAliasesAndAccessOptions.argTypes = {\n  onClick: { action: "onClickStub" },\n};\nCheckOtherAliasesAndAccessOptions.cy = function () {\n  cy.dataCy("count").should("contain", 0);\n  cy.dataCy("button").click();\n\n  // name on actions is `onClick`\n  cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n  // but the action string also functions as an alias\n  cy.get("@onClickStub").should("be.calledOnceWith", 0);\n  // and it\'s also aliased as argTypesRegex.onClick since the argtypes would have applied\n  cy.get("@argTypesRegex.onClick").should("be.calledWith", 0);\n\n  cy.dataCy("count").should("contain", 1);\n\n  cy.dataCy("button")\n    .click()\n    .then(() => {\n      // just proving that `this` access works\n      const self = this as any;\n      expect(self.actions.onClick).to.have.callCount(2).and.be.calledWith(1);\n      expect(self.onClickStub).to.have.callCount(2).and.be.calledWith(1);\n      expect(self["argTypesRegex.onClick"])\n        .to.have.callCount(2)\n        .and.be.calledWith(1);\n      cy.dataCy("count").should("contain", 2);\n    });\n};\n// story-code @end\n\nexport const ImplicitArgtypeViaRegex: ComponentStoryObjCy<typeof ClickCount> = {\n  cy: {\n    "should stub via argtype regex when no other reasons for stubbing exist":\n      function () {\n        cy.dataCy("button")\n          .click()\n          .then(() => {\n            // confirming that `this` access also works\n            // @ts-ignore\n            expect(this.actions.onClick).to.be.calledOnceWith(0);\n          });\n        cy.get("@actions").its("onClick").should("be.calledOnceWith", 0);\n        cy.get("@argTypesRegex.onClick").should("be.calledOnceWith", 0);\n      },\n  },\n};\n\nexport const WithExplicitStubAsPropToStory: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  cyTest: (Story) => {\n    beforeEach(() => {\n      cy.spy(() => 1).as("beforeEachSpy");\n    });\n\n    it("should call the spy and not the argTypesRegex stub", function () {\n      // could be alias syntax, but showing variant\n      cy.mount(<Story onClick={this.beforeEachSpy} />);\n      cy.dataCy("button")\n        .click()\n        .then(() => {\n          expect(this.actions.onClick).to.have.callCount(0);\n          expect(this["argTypesRegex.onClick"]).to.have.callCount(0);\n          expect(this.beforeEachSpy).to.be.calledOnceWith(0);\n        });\n    });\n  },\n};\n\nexport const MockIfProvidedViaArgsRegardlessOfDocgen: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  args: {\n    // @ts-ignore\n    onSomethingElse: () => 1,\n  },\n  cy: () => {\n    // these won\'t be called, but asserting not called proves they were stubbed and are stubs/spies\n    cy.get("@actions").its("onSomethingElse").should("not.be.called");\n    cy.get("@argTypesRegex.onSomethingElse").should("not.be.called");\n  },\n  // story-code @skip-start\n  parameters: {\n    docs: {\n      description: {\n        story: `\nProves that you can mock without presence of docgen plugin as long as it comes in as an arg.\nProviding a mock not acceptable by typescript was easier than building a separate pipeline\nwithout docgen`,\n      },\n    },\n  },\n  // story-code @skip-end\n};\n\nexport const MockIfProvidedViaArgTypesRegardlessOfDocgen: ComponentStoryObjCy<\n  typeof ClickCount\n> = {\n  argTypes: {\n    // @ts-ignore\n    onSomethingElse: { action: "onSomethingElseAlias" },\n  },\n  cy: () => {\n    cy.get("@actions").its("onSomethingElse").should("not.be.called");\n    cy.get("@onSomethingElseAlias").should("not.be.called");\n  },\n};\n',locationsMap:{"stub-actions":{startLoc:{col:64,line:7},endLoc:{col:1,line:9},startBody:{col:64,line:7},endBody:{col:1,line:9}},"check-other-aliases-and-access-options":{startLoc:{col:4,line:29},endLoc:{col:38,line:29},startBody:{col:4,line:29},endBody:{col:38,line:29}}}},_parameters),component:_Button__WEBPACK_IMPORTED_MODULE_5__.t};var StubActions=function StubActions(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.t,Object.assign({},args))};StubActions.displayName="StubActions",StubActions.argTypes={onClick:{action:"onClickStub"},onClick2:{action:"onClick2Stub"}},StubActions.cyOnly=!0,StubActions.cy=function(){cy.dataCy("count").should("contain",0),cy.dataCy("button").click(),cy.get("@onClickStub").should("be.calledOnceWith",0),cy.dataCy("count").should("contain",1),cy.dataCy("button").click(),cy.get("@onClickStub").should("have.callCount",2).and("be.calledWith",1),cy.dataCy("button-2").click().click().click(),cy.get("@onClick2Stub").should("have.callCount",3)};var CheckOtherAliasesAndAccessOptions=function CheckOtherAliasesAndAccessOptions(args){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(_Button__WEBPACK_IMPORTED_MODULE_5__.t,Object.assign({},args))};CheckOtherAliasesAndAccessOptions.displayName="CheckOtherAliasesAndAccessOptions",CheckOtherAliasesAndAccessOptions.argTypes={onClick:{action:"onClickStub"}},CheckOtherAliasesAndAccessOptions.cy=function(){var _this=this;cy.dataCy("count").should("contain",0),cy.dataCy("button").click(),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@onClickStub").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("be.calledWith",0),cy.dataCy("count").should("contain",1),cy.dataCy("button").click().then((function(){var self=_this;expect(self.actions.onClick).to.have.callCount(2).and.be.calledWith(1),expect(self.onClickStub).to.have.callCount(2).and.be.calledWith(1),expect(self["argTypesRegex.onClick"]).to.have.callCount(2).and.be.calledWith(1),cy.dataCy("count").should("contain",2)}))};var ImplicitArgtypeViaRegex={cy:{"should stub via argtype regex when no other reasons for stubbing exist":function shouldStubViaArgtypeRegexWhenNoOtherReasonsForStubbingExist(){var _this2=this;cy.dataCy("button").click().then((function(){expect(_this2.actions.onClick).to.be.calledOnceWith(0)})),cy.get("@actions").its("onClick").should("be.calledOnceWith",0),cy.get("@argTypesRegex.onClick").should("be.calledOnceWith",0)}}},WithExplicitStubAsPropToStory={cyTest:function cyTest(Story){beforeEach((function(){cy.spy((function(){return 1})).as("beforeEachSpy")})),it("should call the spy and not the argTypesRegex stub",(function(){var _this3=this;cy.mount((0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_6__.jsx)(Story,{onClick:this.beforeEachSpy})),cy.dataCy("button").click().then((function(){expect(_this3.actions.onClick).to.have.callCount(0),expect(_this3["argTypesRegex.onClick"]).to.have.callCount(0),expect(_this3.beforeEachSpy).to.be.calledOnceWith(0)}))}))}},MockIfProvidedViaArgsRegardlessOfDocgen={args:{onSomethingElse:function onSomethingElse(){return 1}},cy:function(_cy){function cy(){return _cy.apply(this,arguments)}return cy.toString=function(){return _cy.toString()},cy}((function(){cy.get("@actions").its("onSomethingElse").should("not.be.called"),cy.get("@argTypesRegex.onSomethingElse").should("not.be.called")})),parameters:{docs:{description:{story:"\nProves that you can mock without presence of docgen plugin as long as it comes in as an arg.\nProviding a mock not acceptable by typescript was easier than building a separate pipeline\nwithout docgen"}}}},MockIfProvidedViaArgTypesRegardlessOfDocgen={argTypes:{onSomethingElse:{action:"onSomethingElseAlias"}},cy:function(_cy2){function cy(){return _cy2.apply(this,arguments)}return cy.toString=function(){return _cy2.toString()},cy}((function(){cy.get("@actions").its("onSomethingElse").should("not.be.called"),cy.get("@onSomethingElseAlias").should("not.be.called")}))},__namedExportsOrder=["StubActions","CheckOtherAliasesAndAccessOptions","ImplicitArgtypeViaRegex","WithExplicitStubAsPropToStory","MockIfProvidedViaArgsRegardlessOfDocgen","MockIfProvidedViaArgTypesRegardlessOfDocgen"]},"./stories/Button/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{z:()=>Button_Button,t:()=>ClickCount_ClickCount});var react=__webpack_require__("./node_modules/react/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),Button_Button=function Button(_ref){var onClick=_ref.onClick,disabled=_ref.disabled,_ref$label=_ref.label,label=void 0===_ref$label?"click me":_ref$label,_ref$dataCy=_ref.dataCy,dataCy=void 0===_ref$dataCy?"button":_ref$dataCy;return(0,jsx_runtime.jsx)("button",{onClick,disabled,"data-cy":dataCy,children:label})};Button_Button.displayName="Button";try{Button_Button.displayName="Button",Button_Button.__docgenInfo={description:"Just a typical button really",displayName:"Button",props:{onClick:{defaultValue:null,description:"fire action on click",name:"onClick",required:!1,type:{name:"(() => void)"}},label:{defaultValue:{value:"click me"},description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:{value:"button"},description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/Button.tsx#Button"]={docgenInfo:Button_Button.__docgenInfo,name:"Button",path:"stories/Button/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var _excluded=["onClick","onClick2"];function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var leftPad={style:{paddingLeft:"10px"}},ClickCount_ClickCount=function ClickCount(_ref){var onClick=_ref.onClick,onClick2=_ref.onClick2,rest=_objectWithoutProperties(_ref,_excluded),_React$useState2=_slicedToArray(react.useState(0),2),clickCount=_React$useState2[0],setClickCount=_React$useState2[1],_React$useState4=_slicedToArray(react.useState(0),2),clickCount2=_React$useState4[0],setClickCount2=_React$useState4[1],handleClick=function handleClick(){var isCount=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return function(){isCount?(null==onClick||onClick(clickCount),setClickCount(clickCount+1)):(null==onClick2||onClick2(clickCount2),setClickCount2(clickCount2+1))}};return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)("span",{"data-cy":"count",children:["Count is ",clickCount]}),(0,jsx_runtime.jsx)("span",Object.assign({},leftPad,{children:(0,jsx_runtime.jsx)(Button_Button,Object.assign({onClick:handleClick()},rest))})),(0,jsx_runtime.jsxs)("span",Object.assign({"data-cy":"count-2"},leftPad,{children:["Count 2 is ",clickCount2]})),(0,jsx_runtime.jsx)("span",Object.assign({},leftPad,{children:(0,jsx_runtime.jsx)(Button_Button,Object.assign({dataCy:"button-2",onClick:handleClick(!1)},rest))}))]})};try{ClickCount_ClickCount.displayName="ClickCount",ClickCount_ClickCount.__docgenInfo={description:"Two buttons which show individual click counts",displayName:"ClickCount",props:{onClick:{defaultValue:null,description:"fire action on click\nfire action on click with previous click count",name:"onClick",required:!1,type:{name:"((() => void) & ((prevClickCount: number) => void))"}},label:{defaultValue:null,description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:null,description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}},onClick2:{defaultValue:null,description:"fire a second action with a different count",name:"onClick2",required:!1,type:{name:"((prevClickCount2: number) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/ClickCount.tsx#ClickCount"]={docgenInfo:ClickCount_ClickCount.__docgenInfo,name:"ClickCount",path:"stories/Button/ClickCount.tsx#ClickCount"})}catch(__react_docgen_typescript_loader_error){}try{Button.displayName="Button",Button.__docgenInfo={description:"Just a typical button really",displayName:"Button",props:{onClick:{defaultValue:null,description:"fire action on click",name:"onClick",required:!1,type:{name:"(() => void)"}},label:{defaultValue:{value:"click me"},description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:{value:"button"},description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/index.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"stories/Button/index.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}try{ClickCount.displayName="ClickCount",ClickCount.__docgenInfo={description:"Two buttons which show individual click counts",displayName:"ClickCount",props:{onClick:{defaultValue:null,description:"fire action on click\nfire action on click with previous click count",name:"onClick",required:!1,type:{name:"((() => void) & ((prevClickCount: number) => void))"}},label:{defaultValue:null,description:"label for the button",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"if the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},dataCy:{defaultValue:null,description:"tag to make test selection easy + stable",name:"dataCy",required:!1,type:{name:"string"}},onClick2:{defaultValue:null,description:"fire a second action with a different count",name:"onClick2",required:!1,type:{name:"((prevClickCount2: number) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories/Button/index.tsx#ClickCount"]={docgenInfo:ClickCount.__docgenInfo,name:"ClickCount",path:"stories/Button/index.tsx#ClickCount"})}catch(__react_docgen_typescript_loader_error){}},"./storybook-init-framework-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__("./node_modules/@storybook/react/dist/esm/client/index.js")},"./stories/FileFormats/ExternalTest/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_index_stories__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./stories/FileFormats/ExternalTest/index.stories.tsx"),_Button__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./stories/Button/index.tsx"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,id:"external-test",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"defining-tests-in-an-external-file"},"Defining Tests in an External File"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.oG,{story:_index_stories__WEBPACK_IMPORTED_MODULE_8__.ExternalTest,id:"external-test",mdxType:"Story"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"In an external file, you could write a test which used composeStories\nand cy.mount explicitly. In fact, you could do this entirely without this package."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-tsx"},'import { composeStories } from "@storybook/react";\nimport React from "react";\nimport * as stories from "./index.stories";\n\nconst { ExternalTest } = composeStories(stories);\n\ndescribe("External test file", () => {\n  it("should contain the external label", () => {\n    cy.mount(<ExternalTest />);\n    cy.dataCy("button").should(\n      "contain",\n      "Will be tested in external .cy file"\n    );\n  });\n});\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"If the stories feature mdx docs according to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md",target:"_blank",rel:"nofollow noopener noreferrer"},"this recipe")," (although actually you'll want to include the default export and add ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories: []")," which it hints at), then you'll want to override the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories")," in the test file so that ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"composeStories")," can find the proper tests. That is in fact what this ExternalTest is doing."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"// this is necessary b/c stories here have mdx generated docs\ndelete (stories.default as { includeStories?: string[] }).includeStories;\nconst { ExternalTest } = composeStories(stories);\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"In the story file, define stories exactly as you normally would, although you may\nwant to skip automatic test execution."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},"export default {\n  component: Button,\n  // otherwise this would do a mount test like Untested.stories.tsx\n  // which would be fine in this case, just redundant\n  cySkip: true,\n};\n\nexport const ExternalTest: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\n")))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={id:"external-test",component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/MDX/DocsInMDX/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{_DocsInMDX_:()=>_DocsInMDX_,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_index_stories__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./stories/MDX/DocsInMDX/index.stories.tsx"),_Button__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__("./stories/Button/index.tsx"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,id:"docs-in-mdx",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"defining-documentation-in-mdx-files"},"Defining Documentation in MDX files"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.oG,{story:_index_stories__WEBPACK_IMPORTED_MODULE_8__.DocsInMDX,name:"_DocsInMDX_",mdxType:"Story"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"The storybook preferred way of writing stories in CSF format but adding documentation in MDX files is to follow ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://github.com/storybookjs/storybook/blob/next/code/addons/docs/docs/recipes.md#csf-stories-with-mdx-docs",target:"_blank",rel:"nofollow noopener noreferrer"},"this recipe"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"For cypress tests purposes, we'll want to include the default export but then add ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories: []"),", which is a pattern hinted at in that documentation but which must have changed slightly. However, for automatic testing purposes, that will be a problem for ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"composeStories"),". As such, you should add ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"cyIncludeStories: true")," to your default export. For this repo specifically, we don't want to show the component itself in the docs, so we set ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"parameters.docs.disable")," to ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"true"),". All in, the story file looks like this"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import type { ComponentStory } from "@storybook/react";\nimport * as React from "react";\nimport { Button } from "../../Button";\n\n// eslint-disable-next-line storybook/story-exports\nexport default {\n  component: Button,\n  // mdx generated docs\n  includeStories: [],\n  cyIncludeStories: true,\n};\n\nexport const DocsInMDX: ComponentStory<typeof Button> = (args) => (\n  <Button {...args} />\n);\nDocsInMDX.args = {\n  label: "Documentation provided by mdx file while component is written in csf",\n};\n// don\'t show the component in the docs created by mdx\nDocsInMDX.parameters = {\n  docs: { disable: true },\n};\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"and the MDX file looks like, well..., this file. But here's a snippet:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Meta, Story } from '@storybook/addon-docs';\nimport * as stories from './index.stories';\nimport { Button } from '../../Button';\n\n<Meta title=\"Docs In MDX\" component={Button} />\n\n# Defining Documentation in MDX files\n\n<Story story={stories.DocsInMDX} />\n\nThe storybook preferred way of writing stories in CSF format but adding documentation in MDX files...\n")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"See ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"/docs/external-test"},"External Test")," for another example and one in which the tests are external, and so don't need the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"cyIncludeStories")," but which will need to override the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"includeStories")," manually."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var _DocsInMDX_=_index_stories__WEBPACK_IMPORTED_MODULE_8__.DocsInMDX,componentMeta={id:"docs-in-mdx",component:_Button__WEBPACK_IMPORTED_MODULE_9__.z,includeStories:["_DocsInMDX_"]},mdxStoryNameToKey={_DocsInMDX_:"_DocsInMDX_"};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["_DocsInMDX_"]},"./stories/MDX/MDXFileWithExternalTests/index.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__,mdxFileWithExternalTests:()=>mdxFileWithExternalTests});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js");var react__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./node_modules/react/index.js"),_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_Button__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("./stories/Button/index.tsx"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{title:"MDX/MDXFileWithExternalTests",component:_Button__WEBPACK_IMPORTED_MODULE_8__.t,id:"mdx-file-with-external-tests",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"defining-stories-in-mdx"},"Defining Stories in MDX"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"You can define stories in MDX format! I really didn't think this'd work, but if you mimic storybook's own webpack rules for .mdx files, then they acte exactly like CSF files."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import { Meta, Story } from \'@storybook/addon-docs\';\nimport { ClickCount } from \'../../Button\';\n\n<Meta title="MDX/MDXFileWithExternalTests" component={ClickCount} />\n\n# Whatever Markdown\n\n<Story name="MDXFileWithExternalTests">\n  {(args) => (\n    <>\n      <div>This is a story</div>\n      <ClickCount label="In MDX" {...args} />\n    </>\n  )}\n</Story>\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.oG,{name:"MDXFileWithExternalTests",parameters:{docs:{disable:!0}},mdxType:"Story"},(function(args){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(react__WEBPACK_IMPORTED_MODULE_5__.Fragment,null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("div",null,"This is a story"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_Button__WEBPACK_IMPORTED_MODULE_8__.t,_extends({label:"In MDX"},args,{mdxType:"ClickCount"})))})),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"And the test would look like this:"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import { composeStories } from "@storybook/react";\nimport React from "react";\n// @ts-ignore\nimport * as stories from "./index.stories.mdx";\n\nconst { mdxFileWithExternalTests: MDXFileWithExternalTests } =\n  composeStories(stories);\n\ndescribe("External test file", () => {\n  it("should contain the external label", () => {\n    const onClick = cy.stub();\n    cy.mount(<MDXFileWithExternalTests onClick={onClick} />);\n    cy.dataCy("button").should("contain", "In MDX");\n    cy.dataCy("button")\n      .click()\n      .then(() => expect(onClick).to.be.calledOnceWith(0));\n  });\n});\n')),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",{id:"caveats"},"Caveats"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"Component name comes in camelCased."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},"Same as for external files in general, some manual setup and currently the global parameters must be provided directly to support automocking.")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h2",{id:"webpack-config-in-cypressconfigts"},"Webpack config in cypress.config.ts"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'import webpackConfig from "./webpack.config";\n\n// ...\n\nwebpackConfig.module.rules.push({\n  test: /\\.mdx$/,\n  use: [\n    {\n      loader: "babel-loader",\n      options: {\n        babelrc: false,\n        configFile: false,\n        sourceType: "unambiguous",\n        presets: ["@babel/preset-env", "@babel/preset-react"],\n        // possible copying over more could help with caveats or fix edgecases I\'ve yet to find\n      },\n    },\n    {\n      loader: require.resolve("@storybook/mdx1-csf/loader"),\n      options: { skipCsf: false },\n      // same here, there were two `remark` options\n    },\n  ],\n});\n\nexport default defineConfig({\n  component: {\n    devServer: {\n      framework: "react",\n      bundler: "webpack",\n      webpackConfig,\n    },\n    // ...\n  },\n});\n')))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var mdxFileWithExternalTests=function mdxFileWithExternalTests(args){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(react__WEBPACK_IMPORTED_MODULE_5__.Fragment,null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("div",null,"This is a story"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_Button__WEBPACK_IMPORTED_MODULE_8__.t,_extends({label:"In MDX"},args)))};mdxFileWithExternalTests.storyName="MDXFileWithExternalTests",mdxFileWithExternalTests.parameters=Object.assign({storySource:{source:'args => <>\n      <div>This is a story</div>\n      <ClickCount label="In MDX" {...args} />\n    </>'}},{docs:{disable:!0}});var componentMeta={title:"MDX/MDXFileWithExternalTests",id:"mdx-file-with-external-tests",component:_Button__WEBPACK_IMPORTED_MODULE_8__.t,includeStories:["mdxFileWithExternalTests"]},mdxStoryNameToKey={MDXFileWithExternalTests:"mdxFileWithExternalTests"};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["mdxFileWithExternalTests"]},"./stories/Overview.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>Overview_stories});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var esm=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),dist_esm=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,esm.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)("div",{align:"center"},(0,esm.kt)("img",{src:"https://user-images.githubusercontent.com/9889378/203303857-c5e4682d-afda-4956-bd3b-d54630a7041c.jpeg",alt:"Van Gogh's Painting of 'Road with Cypress and Star'",width:"400px"})),(0,esm.kt)("h1",{id:"cypress-storybook-component-tests"},"Cypress Storybook Component Tests"),(0,esm.kt)("p",null,(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/storybook/",target:"_blank",rel:"nofollow noopener noreferrer"},(0,esm.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/storybookjs/brand/main/badge/badge-storybook.svg",alt:"Storybook"}))," ",(0,esm.kt)("a",{parentName:"p",href:"https://github.com/quotapath/orphic-cypress/actions/workflows/ci.yml",target:"_blank",rel:"nofollow noopener noreferrer"},(0,esm.kt)("img",{parentName:"a",src:"https://github.com/quotapath/orphic-cypress/actions/workflows/ci.yml/badge.svg",alt:"CI"}))),(0,esm.kt)("p",null,"A set of utilities, typescript transformers, and general examples on how to cover storybook stories with cypress component tests.\nIn short, this is a little overengineering, a little black magic, and a lot of documentation on making these kinds of tests as easy and concise as possible."),(0,esm.kt)("h2",{id:"features"},"Features"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"An automatic cypress component test executor for storybook stories to test that stories render without any additional files or changes"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#additional-syntaxes"},"A series of file syntaxes")," to support ",(0,esm.kt)("inlineCode",{parentName:"li"},".play")," like functionality inside of story files for extremely terse testing"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#stubbing-actions"},"Automatic action stubs and spies")," with first level cypress support"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"#isolated-component-files-transformer"},"A typescript transform")," that turns your ",(0,esm.kt)("inlineCode",{parentName:"li"},"stories.tsx")," files into cypress executable files with just a bit of black magic, making for pleasent headed cypress runs and better debuggability"),(0,esm.kt)("li",{parentName:"ul"},"Tools for turning ",(0,esm.kt)("a",{parentName:"li",href:"#intercepting-api-requests"},"storybook addon mock api calls into cypress intercepts")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"https://quotapath.github.io/orphic-cypress/storybook/",target:"_blank",rel:"nofollow noopener noreferrer"},"A comprehensive set of examples")," for using cypress to test storybook with or without tools given here, including some surprising finds ",(0,esm.kt)("a",{parentName:"li",href:"https://quotapath.github.io/orphic-cypress/storybook/?path=/docs/mdx-file-with-external-tests",target:"_blank",rel:"nofollow noopener noreferrer"},"like how to use composeStories with mdx files"))),(0,esm.kt)("p",null,"See extended module documentation in ",(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/",target:"_blank",rel:"nofollow noopener noreferrer"},"github pages")," and numerous examples at a ",(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/storybook/",target:"_blank",rel:"nofollow noopener noreferrer"},"hosted storybook")),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"what-this-is"},"What this is"),(0,esm.kt)("p",null,"We love storybook and component driven development, but we also love cypress!"),(0,esm.kt)("p",null,"We were initially excited about ",(0,esm.kt)("a",{parentName:"p",href:"https://storybook.js.org/docs/react/writing-tests/interaction-testing",target:"_blank",rel:"nofollow noopener noreferrer"},"storybook's interaction testing"),". We even wrote some tests and committed to this as the direction forward, translating over our early enzyme tests."),(0,esm.kt)("p",null,"Ultimately though, we found that the bringing in net-new technologies like jest and testing-library would be too much cognitive overhead and dissonance alongside our end-to-end tests already written using cypress, and our unit tests already using the mocha/chai/sinon stack."),(0,esm.kt)("p",null,"So, we set out to come up with a standard for executing storybook tests in cypress with just the right balance of spooky magic that we have minimal boilerplate, encourage writing tests early and often, and cover stories which don't have explicit tests. Although it's with a heavy heart that we leave behind some of the benefits of storybook's solution, we're thrilled to have test coverage that fits with our existing paradigms. And cypress component testing is really slick."),(0,esm.kt)("p",null,"We also export a few helpers that we find useful for things like creating commands and tasks in typescript."),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"using-this-package"},"Using this package"),(0,esm.kt)("p",null,"As is, you could set up cypress component testing following ",(0,esm.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/component-testing/quickstart-react#Configuring-Component-Testing",target:"_blank",rel:"nofollow noopener noreferrer"},"their guide")," and write tests like this without any need for the code in this package."),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'import { composeStories } from "@storybook/testing-react";\nimport React from "react";\n\nimport * as stories from "./index.stories";\n\nconst { CompWithLabel } = composeStories(stories);\n\ndescribe("SomeComponent", () => {\n  it("should render ok", () => {\n    cy.mount(<CompWithLabel />);\n  });\n\n  it("should show the provided label", () => {\n    cy.mount(<CompWithLabel />);\n    cy.get(".typography").should("be.visible").and("contain", "test");\n  });\n});\n')),(0,esm.kt)("p",null,"But, that could conceivably be seen as a lot of boilerplate, especially when compared to the ",(0,esm.kt)("inlineCode",{parentName:"p"},"play")," syntax of storybook's interactive tests. You'd have to drop something like this into every directory containing a storybook story and perform the ",(0,esm.kt)("inlineCode",{parentName:"p"},"should render ok")," test to make sure your stories aren't breaking. And we haven't even gotten into things like stubbing actions or mocking API calls which would be duplicative of storybook setup."),(0,esm.kt)("p",null,"Instead we could write some simple utilities so that we can keep the files in the ",(0,esm.kt)("inlineCode",{parentName:"p"},"*.stories.tsx"),":"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'const CompWithLabel = () => <Something label="test" />; // was already here\nCompWithLabel.cy = () =>\n  cy.get(".typography").should("be.visible").and("contain", "test");\n')),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"additional-syntaxes"},"Additional Syntaxes"),(0,esm.kt)("p",null,"There are 3 available syntaxes for in-file use. See ",(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/storybook/?path=/docs/fileformats-storybookfiles",target:"_blank",rel:"nofollow noopener noreferrer"},"storybook")," for comprehensive examples."),(0,esm.kt)("h2",{id:"function-syntax"},(0,esm.kt)("inlineCode",{parentName:"h2"},"function")," syntax"),(0,esm.kt)("p",null,"already shown above is the most succinct"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'CompWithLabel.cy = () =>\n  cy.get(".typography").should("be.visible").and("contain", "test");\n')),(0,esm.kt)("h2",{id:"object-syntax"},(0,esm.kt)("inlineCode",{parentName:"h2"},"object")," syntax"),(0,esm.kt)("p",null,"allows you to tag the test with a description of the expectation and to write multiple tests for the same component"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'CompWithLabel.cy = {\n  "should contain the \'test\' label": () =>\n    cy.get(".typography").should("be.visible").and("contain", "test"),\n\n  "should show an expanded label when clicked": () => {\n    cy.get(".typography").click();\n    cy.get(".expanded-label").should("be.visible").and("contain", "more details here");\n  },\n};\n')),(0,esm.kt)("p",null,"Each of these is executed in it's own isolated ",(0,esm.kt)("inlineCode",{parentName:"p"},"it")," function."),(0,esm.kt)("h2",{id:"cytest-syntax"},(0,esm.kt)("inlineCode",{parentName:"h2"},"cyTest")," syntax"),(0,esm.kt)("p",null,"allows the most control but backs off of some of the automatic setup that takes place"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'CompWithLabel.cyTest = (Story) => {\n  it("should contain the \'test\' label", () => {\n    cy.mount(<Story />);\n    cy.get(".typography").should("be.visible").and("contain", "test");\n  });\n\n  it("should show an expanded label when clicked", () => {\n    cy.mount(<Story additionalArgs="more details" />);\n    cy.get(".typography").click();\n    cy.get(".expanded-label").should("be.visible").and("contain", "more details here");\n  });\n};\n')),(0,esm.kt)("p",null,"This executes within it's own ",(0,esm.kt)("inlineCode",{parentName:"p"},"describe")," block and is useful for providing component props or setup not included in stories, or for writing ",(0,esm.kt)("inlineCode",{parentName:"p"},"before"),", ",(0,esm.kt)("inlineCode",{parentName:"p"},"beforeEach"),", etc hooks."),(0,esm.kt)("h2",{id:"opting-out"},"Opting out"),(0,esm.kt)("p",null,"You can opt out of allowing any or all of these syntaxes via cypress configuration. See ",(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/types/config.CyTestConfig.html",target:"_blank",rel:"nofollow noopener noreferrer"},"config module documentation")," for more details."),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"stubbing-actions"},"Stubbing Actions"),(0,esm.kt)("p",null,"By default, ",(0,esm.kt)("inlineCode",{parentName:"p"},"composeStories")," will not stub your actions. This package introduces ",(0,esm.kt)("inlineCode",{parentName:"p"},"stubStoryActions")," to do this automatically when running in the cypress test mode. See ",(0,esm.kt)("a",{parentName:"p",href:"md-docs/modules/actions.md#stubstoryactions"},"its documentation")," for manual use."),(0,esm.kt)("p",null,"See ",(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/storybook/?path=/docs/stubactions",target:"_blank",rel:"nofollow noopener noreferrer"},"storybook")," for example uses with various file types and configurations, and ",(0,esm.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/functions/actions.stubStoryActions.html",target:"_blank",rel:"nofollow noopener noreferrer"},"module docs")," for more details"),(0,esm.kt)("p",null,"Cypress component test stubs are really slick and the test runner provides a great, interactive interface for debugging"),(0,esm.kt)("p",null,(0,esm.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/9889378/203308863-105eac48-a70a-4c21-a439-dead63ef0aed.mp4",target:"_blank",rel:"nofollow noopener noreferrer"},"https://user-images.githubusercontent.com/9889378/203308863-105eac48-a70a-4c21-a439-dead63ef0aed.mp4")),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"isolated-component-files-transformer"},"Isolated Component Files Transformer"),(0,esm.kt)("p",null,"TODO"),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"intercepting-api-requests"},"Intercepting API Requests"),(0,esm.kt)("p",null,"TODO"),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"a-general-overview-of-the-landscape"},"A General Overview of the Landscape"),(0,esm.kt)("h2",{id:"what-are-component-tests"},"What are component tests?"),(0,esm.kt)("p",null,"Component tests are near to unit tests in that they are low-level tests that cover small units of logic, but they also cover React (or other) components specifically and so have some concept of rendering that component in isolation to test against. This is highly preferable to end-to-end testing in that you can test in isolation from the rest of an application without a large amount of setup or database seeding, which means these tests will execute much faster. A lot has been said about component tests, so I won't go into too much detail on what they are or their value, but here's some further reading: "),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"https://docs.cypress.io/guides/component-testing/writing-your-first-component-test",target:"_blank",rel:"nofollow noopener noreferrer"},"Cypress: Writing Your First Component Test")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/testing.html",target:"_blank",rel:"nofollow noopener noreferrer"},"React: Testing Overview")),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("a",{parentName:"li",href:"https://storybook.js.org/docs/react/writing-tests/interaction-testing",target:"_blank",rel:"nofollow noopener noreferrer"},"Storybook: Interaction Testing"))),(0,esm.kt)("p",null,"Lets take a simple example: we have a component that shows some copy if the user is not permissioned, but shows some copy and does a bit of logic if they do have access. Here's some pseudo-code of what you'd expect to see as tests:"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'it("should show copy for a user without permissions", () => {\n  const element = render(<OurComponent>);\n  expect(element.text).to.equal("No soup for you!");\n});\n\nit("should show details for a user ", () => {\n  const element = render(<OurComponent isPermissioned={true} flagCount={4}>);\n  expect(element.text).to.equal("You have four flagged items you need to address");\n  expect(numToWord).to.be.calledOnce.with(4);\n});\n')),(0,esm.kt)("p",null,"Storybook stories make fantastic jumping off points for testing because they're fundamentally designed to illustrate common use cases and already perform a majority of the work that'd need to be done to setup for that component in terms of component state and mocking API or function calls."),(0,esm.kt)("hr",null),(0,esm.kt)("h3",{id:"nice-to-haves-for-component-tests"},"Nice-to-haves for component tests"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"They execute quickly"),(0,esm.kt)("li",{parentName:"ul"},"They're as easy as possible to set up with minimal boilerplate"),(0,esm.kt)("li",{parentName:"ul"},"Optional headed execution so that you can visually see whats happening and debug in a real browser"),(0,esm.kt)("li",{parentName:"ul"},"When executing headlessly in CI for instance, screenshots on errors make for similarly easy debugging as local headed execution")),(0,esm.kt)("hr",null),(0,esm.kt)("h3",{id:"comparison-of-existing-solutions"},"Comparison of Existing Solutions"),(0,esm.kt)("h4",{id:"storybook-interactive-tests"},"Storybook interactive tests"),(0,esm.kt)("p",null,"This is the standard that we're working against here. They'll look like this when using the story function syntax"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},'SomeStory.play = async ({ canvasElement }) => {\n  const canvas = within(canvasElement);\n  expect(canvas.getByTestId("Attainment")).toBeVisible();\n  // Should not see earnings\n  expect(canvas.queryByTestId("Earnings")).toEqual(null);\n  // Should not see more menu\n  expect(canvas.queryByTestId("moreMenu-team")).toEqual(null);\n};\n')),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Pros:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"They’re built into storybook so you get to show interactive stories right there"),(0,esm.kt)("li",{parentName:"ul"},"We’ve already written some. Pretty smooth experience"),(0,esm.kt)("li",{parentName:"ul"},(0,esm.kt)("inlineCode",{parentName:"li"},"actions")," are automatically supplied and are stubs for easy testing"))),(0,esm.kt)("li",{parentName:"ul"},"Cons:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"It requires new knowledge. Jest and testing-library instead of cypress and chai, alongside some specifics to storybook execution"),(0,esm.kt)("li",{parentName:"ul"},"It’s a true pain to set up in CI. They have their own test runner in playwrite, but I couldn’t get it working with a quick pass in circleci. I built a custom cypress executor, but that broke when we moved to nginx.")))),(0,esm.kt)("hr",null),(0,esm.kt)("h4",{id:"cypress-execution-of-builtin-interactive-tests-by-visiting-the-storys-url-or-iframe"},"Cypress execution of builtin interactive tests by visiting the story's url or iframe"),(0,esm.kt)("p",null,"TODO"),(0,esm.kt)("hr",null),(0,esm.kt)("h4",{id:"cypress-component-tests-directly-without-storybook"},"Cypress component tests directly without storybook"),(0,esm.kt)("p",null,"They look like this (example pulled from cypress docs):"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},"import { Stepper } from \"./\";\n\nit('stepper should default to 0', () => {\n  cy.mount(<Stepper />)\n  cy.get(counterSelector).should('have.text', '0')\n})\n")),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Pros:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"We already all know cypress and its tooling"),(0,esm.kt)("li",{parentName:"ul"},"It's slick"))),(0,esm.kt)("li",{parentName:"ul"},"Cons:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"distinct from storybook (though see below) and so we lose that interconnectedness"),(0,esm.kt)("li",{parentName:"ul"},"still technically in beta, though its pretty sophisticated and clear they’re following through with it")))),(0,esm.kt)("hr",null),(0,esm.kt)("h4",{id:"cypress-component-tests-using-storybook-components-what-this-project-does"},"Cypress component tests using storybook components. ",(0,esm.kt)("strong",{parentName:"h4"},"What this project does")),(0,esm.kt)("p",null,"These could be written in the storybook file with some type updates, or alongside in a new file. See ",(0,esm.kt)("a",{parentName:"p",href:"#using-this-package"},"Using this package")," above for an example of what this'll look like."),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Pros:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"We already know and love cypress"),(0,esm.kt)("li",{parentName:"ul"},"Uses stories as test cases, which reduces duplication and increases usefulness/documentative natures of both test and story"))),(0,esm.kt)("li",{parentName:"ul"},"Cons:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"Still wont appear in storybook so you’d still have to pull up a separate process to see the interactive story/test"),(0,esm.kt)("li",{parentName:"ul"},"currently only works with typescript or javascript story files, not mdx")))),(0,esm.kt)("hr",null),(0,esm.kt)("h4",{id:"mocha-or-other-headless-execution-of-storybook-interactive-tests"},"Mocha or other headless execution of storybook interactive tests:"),(0,esm.kt)("p",null,"TODO: Add in a realistic example"),(0,esm.kt)("pre",null,(0,esm.kt)("code",{parentName:"pre",className:"language-ts"},"")),(0,esm.kt)("p",null,"Use composeStories from above and then execute the .play"),(0,esm.kt)("ul",null,(0,esm.kt)("li",{parentName:"ul"},"Pros:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"back to tests being visible in storybook through interaction testing addon"),(0,esm.kt)("li",{parentName:"ul"},"simpler headless CI execution than storybook's playwrite executor"))),(0,esm.kt)("li",{parentName:"ul"},"Cons:",(0,esm.kt)("ul",{parentName:"li"},(0,esm.kt)("li",{parentName:"ul"},"only works with .tsx, not .mdx"),(0,esm.kt)("li",{parentName:"ul"},"we’d have to build out some infrastructure to support automatic discovery and execution"),(0,esm.kt)("li",{parentName:"ul"},"headless, so won’t get screens of component on error, but could still interact in storybook"),(0,esm.kt)("li",{parentName:"ul"},"back to having to know jest + testing-library")))),(0,esm.kt)("br",null),(0,esm.kt)("h1",{id:"prior-art"},"Prior Art"),(0,esm.kt)("p",null,(0,esm.kt)("a",{parentName:"p",href:"https://www.cypress.io/blog/2021/05/19/cypress-x-storybook-2-0/",target:"_blank",rel:"nofollow noopener noreferrer"},"Cypress's recommendation on component testing storybook")," is essentially the 'what you can do without this package'"))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var Overview_stories_excluded=["components"];function Overview_stories_extends(){return Overview_stories_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},Overview_stories_extends.apply(this,arguments)}function Overview_stories_objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function Overview_stories_objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var Overview_stories_layoutProps={};function Overview_stories_MDXContent(_ref){var components=_ref.components,props=Overview_stories_objectWithoutProperties(_ref,Overview_stories_excluded);return(0,esm.kt)("wrapper",Overview_stories_extends({},Overview_stories_layoutProps,props,{components,mdxType:"MDXLayout"}),(0,esm.kt)(dist_esm.h_,{title:"Overview",mdxType:"Meta"}),(0,esm.kt)(MDXContent,{mdxType:"Readme"}))}Overview_stories_MDXContent.displayName="MDXContent",Overview_stories_MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"Overview",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,esm.kt)(dist_esm.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,esm.kt)(Overview_stories_MDXContent,null))}});const Overview_stories=componentMeta;var __namedExportsOrder=["__page"]},"./stories/SkippingAndSelecting/Only.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"selecting-stories-with-cyonly"},"Selecting stories with .cyOnly"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"cyOnly")," property on either the default export or individual stories effectively\ncalls the cypress test with ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"describe.only")," or ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"it.only"),", restively."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"That should be used with caution of course, e.g. actually including something\nlike these tests would effectively narrow down which tests were running in a major way,\nespecially in the non-isolated, 'mount' test."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("pre",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("code",{parentName:"pre",className:"language-ts"},'export default { component: Button };\n\nexport const NotSkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nNotSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Story function");\n\nNotSkippedFunction.cyOnly = true;\n\nexport const SkippedFunction: ComponentStoryCy<typeof Button> = (args) => (\n  <Button {...args} label="Story function" />\n);\n\nSkippedFunction.cy = () =>\n  cy.dataCy("button").should("contain", "Would fail if not skipped");\n\nexport const NotSkippedObject = {\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Another"),\n  cyOnly: true,\n};\n\nexport const SkippedObject = {\n  args: { label: "Another" },\n  cy: () => cy.dataCy("button").should("contain", "Would fail if not skipped"),\n};\n')))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/SkippingAndSelecting/Overview.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"skipping-and-selecting-files"},"Skipping and Selecting Files"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"Stories can be skipped or selected via 'only' by a vareity of means."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("ul",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"li",href:"/docs/skippingandselecting-fullyskipped--skipped"},".cySkip")," on default export"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"li",href:"/docs/skippingandselecting-skippedstories--skipped"},".cySkip")," per story"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"li",href:"/docs/ignoring-via-cyincludestories--not-skipped-function"},".cyIncludeFiles")),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("li",{parentName:"ul"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"li",href:"/docs/skippingandselecting-only--page"},".cyOnly"))),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"See the examples in these stories\nand see the types of\n",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/types/types.WithCy.html",target:"_blank",rel:"nofollow noopener noreferrer"},"WithCy"),"\nfor each story and\n",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/types/types.StoryFileCyExtension.html",target:"_blank",rel:"nofollow noopener noreferrer"},"StoryFileCyExtension"),"\nfor the default export additions in particular for detailed module documentation."))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories/StubActions/Overview.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.array.index-of.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.function.bind.js"),__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _mdx_js_react__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./node_modules/@mdx-js/react/dist/esm.js"),_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./node_modules/@storybook/addon-docs/dist/esm/index.js"),_excluded=["components"];function _extends(){return _extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},_extends.apply(this,arguments)}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var layoutProps={};function MDXContent(_ref){var components=_ref.components,props=_objectWithoutProperties(_ref,_excluded);return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("wrapper",_extends({},layoutProps,props,{components,mdxType:"MDXLayout"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.h_,{title:"StubActions/Overview",mdxType:"Meta"}),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("h1",{id:"stubbing-actions"},"Stubbing Actions"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"This library provides tools for automatic action stubbing based on ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"args"),", ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"argTypes")," and the ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("inlineCode",{parentName:"p"},"argTypesRegex"),"."),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"See these tests for example uses with various file types and configurations, and ",(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://quotapath.github.io/orphic-cypress/functions/actions.stubStoryActions.html",target:"_blank",rel:"nofollow noopener noreferrer"},"module docs"),"\nfor more details"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,"Cypress component test stubs are really slick and the test runner provides a great, interactive interface for debugging"),(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("p",null,(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("a",{parentName:"p",href:"https://user-images.githubusercontent.com/9889378/203308863-105eac48-a70a-4c21-a439-dead63ef0aed.mp4",target:"_blank",rel:"nofollow noopener noreferrer"},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)("img",{parentName:"a",src:"https://user-images.githubusercontent.com/9889378/203309810-fe715890-3236-46a2-99f6-680bb6c39235.gif",alt:"stub-actions"}))))}MDXContent.displayName="MDXContent",MDXContent.isMDXComponent=!0;var __page=function __page(){throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};var componentMeta={title:"StubActions/Overview",includeStories:["__page"]},mdxStoryNameToKey={};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs=Object.assign({},componentMeta.parameters.docs||{},{page:function page(){return(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(_storybook_addon_docs__WEBPACK_IMPORTED_MODULE_7__.aT,{mdxStoryNameToKey,mdxComponentAnnotations:componentMeta},(0,_mdx_js_react__WEBPACK_IMPORTED_MODULE_6__.kt)(MDXContent,null))}});const __WEBPACK_DEFAULT_EXPORT__=componentMeta;var __namedExportsOrder=["__page"]},"./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./FileFormats/CypressTestHooksLikeBeforeEach.stories.tsx":"./stories/FileFormats/CypressTestHooksLikeBeforeEach.stories.tsx","./FileFormats/ExternalTest/index.stories.tsx":"./stories/FileFormats/ExternalTest/index.stories.tsx","./FileFormats/StandardCSFButAutomaticallyRenderTested.stories.tsx":"./stories/FileFormats/StandardCSFButAutomaticallyRenderTested.stories.tsx","./FileFormats/StorybookFiles.stories.tsx":"./stories/FileFormats/StorybookFiles.stories.tsx","./MDX/CSFStoriesWithArbitraryMDX/index.stories.tsx":"./stories/MDX/CSFStoriesWithArbitraryMDX/index.stories.tsx","./MDX/DocsInMDX/index.stories.tsx":"./stories/MDX/DocsInMDX/index.stories.tsx","./SkippingAndSelecting/FullySkipped.stories.tsx":"./stories/SkippingAndSelecting/FullySkipped.stories.tsx","./SkippingAndSelecting/IgnoringViaCyIncludeStories.stories.tsx":"./stories/SkippingAndSelecting/IgnoringViaCyIncludeStories.stories.tsx","./SkippingAndSelecting/SkippedStories.stories.tsx":"./stories/SkippingAndSelecting/SkippedStories.stories.tsx","./StubActions/ExternalTests/index.stories.tsx":"./stories/StubActions/ExternalTests/index.stories.tsx","./StubActions/WithDefaultExportSettings.stories.tsx":"./stories/StubActions/WithDefaultExportSettings.stories.tsx","./StubActions/WithStorySettings.stories.tsx":"./stories/StubActions/WithStorySettings.stories.tsx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$"},"./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./FileFormats/ExternalTest/index.stories.mdx":"./stories/FileFormats/ExternalTest/index.stories.mdx","./MDX/DocsInMDX/index.stories.mdx":"./stories/MDX/DocsInMDX/index.stories.mdx","./MDX/MDXFileWithExternalTests/index.stories.mdx":"./stories/MDX/MDXFileWithExternalTests/index.stories.mdx","./Overview.stories.mdx":"./stories/Overview.stories.mdx","./SkippingAndSelecting/Only.stories.mdx":"./stories/SkippingAndSelecting/Only.stories.mdx","./SkippingAndSelecting/Overview.stories.mdx":"./stories/SkippingAndSelecting/Overview.stories.mdx","./StubActions/Overview.stories.mdx":"./stories/StubActions/Overview.stories.mdx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$"},"?4f7e":()=>{},"./generated-stories-entry.cjs":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module=__webpack_require__.nmd(module),(0,__webpack_require__("./node_modules/@storybook/react/dist/esm/client/index.js").configure)([__webpack_require__("./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$"),__webpack_require__("./stories sync recursive ^\\.(?:(?:^%7C\\/%7C(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")],module,!1)}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[506],(()=>(__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_exec__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_exec__("./storybook-init-framework-entry.js"),__webpack_exec__("./node_modules/@storybook/react/dist/esm/client/docs/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/react/dist/esm/client/preview/config-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-links/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-actions/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-backgrounds/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-measure/preview.js-generated-config-entry.js"),__webpack_exec__("./node_modules/@storybook/addon-outline/preview.js-generated-config-entry.js"),__webpack_exec__("./.storybook/preview.ts-generated-config-entry.js"),__webpack_exec__("./generated-stories-entry.cjs"))));__webpack_require__.O()}]);